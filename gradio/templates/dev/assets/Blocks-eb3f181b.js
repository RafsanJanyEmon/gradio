import { e as is_function, S as Static, _ as __vitePreload, w as writable, L as Loader, p as post_data, b as get_store_value, X, f as setupi18n } from './index-30423ace.js';
import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, svg_element, attr_dev, add_location, insert_dev, append_dev, noop, detach_dev, globals, createEventDispatcher, onMount, element, space, text, listen_dev, stop_propagation, group_outros, transition_out, check_outros, transition_in, set_data_dev, add_render_callback, create_in_transition, create_out_transition, run_all, bubble, create_component, mount_component, destroy_component, ensure_array_like_dev, validate_each_keys, update_keyed_each, fix_and_outro_and_destroy_block, set_style, fix_position, create_animation, empty, toggle_class, destroy_each, assign, get_spread_update, get_spread_object, src_url_equal, binding_callbacks, is_function as is_function$1, construct_svelte_component_dev, bind, setContext, add_flush_callback, outro_and_destroy_block, validate_store, component_subscribe, tick, subscribe } from './svelte/svelte-internal.js';
import { h as cubicOut, f as fade, B as Block, I as Info$1, a as Button } from './Button-153ea7e7.js';

/**
 * The flip function calculates the start and end position of an element and animates between them, translating the x and y values.
 * `flip` stands for [First, Last, Invert, Play](https://aerotwist.com/blog/flip-your-animations/).
 *
 * https://svelte.dev/docs/svelte-animate#flip
 * @param {Element} node
 * @param {{ from: DOMRect; to: DOMRect }} fromTo
 * @param {import('./public.js').FlipParams} params
 * @returns {import('./public.js').AnimationConfig}
 */
function flip(node, { from, to }, params = {}) {
	const style = getComputedStyle(node);
	const transform = style.transform === 'none' ? '' : style.transform;
	const [ox, oy] = style.transformOrigin.split(' ').map(parseFloat);
	const dx = from.left + (from.width * ox) / to.width - (to.left + ox);
	const dy = from.top + (from.height * oy) / to.height - (to.top + oy);
	const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
	return {
		delay,
		duration: is_function(duration) ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
		easing,
		css: (t, u) => {
			const x = u * dx;
			const y = u * dy;
			const sx = t + (u * from.width) / to.width;
			const sy = t + (u * from.height) / to.height;
			return `transform: ${transform} translate(${x}px, ${y}px) scale(${sx}, ${sy});`;
		}
	};
}

/* Users/peterallen/Projects/gradio/js/icons/src/Error.svelte generated by Svelte v4.0.0 */

const { Error: Error_1$2 } = globals;
const file$g = "Users/peterallen/Projects/gradio/js/icons/src/Error.svelte";

function create_fragment$l(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "stroke-linecap", "round");
			attr_dev(path, "stroke-linejoin", "round");
			attr_dev(path, "d", "M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z");
			add_location(path, file$g, 12, 1, 217);
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "aria-hidden", "true");
			attr_dev(svg, "stroke-width", "2");
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			add_location(svg, file$g, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error_1$2("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$l.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$l($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Error', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Error> was created with unknown prop '${key}'`);
	});

	return [];
}

let Error$1 = class Error extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$l, create_fragment$l, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Error",
			options,
			id: create_fragment$l.name
		});
	}
};

/* Users/peterallen/Projects/gradio/js/icons/src/Info.svelte generated by Svelte v4.0.0 */

const file$f = "Users/peterallen/Projects/gradio/js/icons/src/Info.svelte";

function create_fragment$k(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "stroke-linecap", "round");
			attr_dev(path, "stroke-linejoin", "round");
			attr_dev(path, "d", "M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z");
			add_location(path, file$f, 12, 1, 217);
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "aria-hidden", "true");
			attr_dev(svg, "stroke-width", "2");
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			add_location(svg, file$f, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$k.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$k($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Info', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Info> was created with unknown prop '${key}'`);
	});

	return [];
}

class Info extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$k, create_fragment$k, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Info",
			options,
			id: create_fragment$k.name
		});
	}
}

/* Users/peterallen/Projects/gradio/js/icons/src/Warning.svelte generated by Svelte v4.0.0 */

const file$e = "Users/peterallen/Projects/gradio/js/icons/src/Warning.svelte";

function create_fragment$j(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "stroke-linecap", "round");
			attr_dev(path, "stroke-linejoin", "round");
			attr_dev(path, "d", "M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z");
			add_location(path, file$e, 12, 1, 217);
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", "2");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "aria-hidden", "true");
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			add_location(svg, file$e, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$j.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$j($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Warning', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Warning> was created with unknown prop '${key}'`);
	});

	return [];
}

class Warning extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$j, create_fragment$j, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Warning",
			options,
			id: create_fragment$j.name
		});
	}
}

/* Users/peterallen/Projects/gradio/js/statustracker/static/ToastContent.svelte generated by Svelte v4.0.0 */

const { Error: Error_1$1 } = globals;
const file$d = "Users/peterallen/Projects/gradio/js/statustracker/static/ToastContent.svelte";

// (34:29) 
function create_if_block_2$5(ctx) {
	let error;
	let current;
	error = new Error$1({ $$inline: true });

	const block = {
		c: function create() {
			create_component(error.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(error, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(error.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(error.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(error, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$5.name,
		type: "if",
		source: "(34:29) ",
		ctx
	});

	return block;
}

// (32:28) 
function create_if_block_1$6(ctx) {
	let info;
	let current;
	info = new Info({ $$inline: true });

	const block = {
		c: function create() {
			create_component(info.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(info, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(info.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(info.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(info, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$6.name,
		type: "if",
		source: "(32:28) ",
		ctx
	});

	return block;
}

// (30:2) {#if type === "warning"}
function create_if_block$9(ctx) {
	let warning;
	let current;
	warning = new Warning({ $$inline: true });

	const block = {
		c: function create() {
			create_component(warning.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(warning, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(warning.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(warning.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(warning, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$9.name,
		type: "if",
		source: "(30:2) {#if type === \\\"warning\\\"}",
		ctx
	});

	return block;
}

function create_fragment$i(ctx) {
	let div5;
	let div0;
	let current_block_type_index;
	let if_block;
	let div0_class_value;
	let t0;
	let div3;
	let div1;
	let t1;
	let div1_class_value;
	let t2;
	let div2;
	let t3;
	let div2_class_value;
	let div3_class_value;
	let t4;
	let button;
	let span;
	let button_class_value;
	let t6;
	let div4;
	let div4_class_value;
	let div5_class_value;
	let div5_intro;
	let div5_outro;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block$9, create_if_block_1$6, create_if_block_2$5];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[1] === "warning") return 0;
		if (/*type*/ ctx[1] === "info") return 1;
		if (/*type*/ ctx[1] === "error") return 2;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			div5 = element("div");
			div0 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div3 = element("div");
			div1 = element("div");
			t1 = text(/*type*/ ctx[1]);
			t2 = space();
			div2 = element("div");
			t3 = text(/*message*/ ctx[0]);
			t4 = space();
			button = element("button");
			span = element("span");
			span.textContent = "×";
			t6 = space();
			div4 = element("div");
			attr_dev(div0, "class", div0_class_value = "toast-icon " + /*type*/ ctx[1] + " s-csdrBJqpTpqa");
			add_location(div0, file$d, 34, 1, 704);
			attr_dev(div1, "class", div1_class_value = "toast-title " + /*type*/ ctx[1] + " s-csdrBJqpTpqa");
			add_location(div1, file$d, 45, 2, 917);
			attr_dev(div2, "class", div2_class_value = "toast-text " + /*type*/ ctx[1] + " s-csdrBJqpTpqa");
			add_location(div2, file$d, 46, 2, 964);
			attr_dev(div3, "class", div3_class_value = "toast-details " + /*type*/ ctx[1] + " s-csdrBJqpTpqa");
			add_location(div3, file$d, 44, 1, 880);
			attr_dev(span, "aria-hidden", "true");
			add_location(span, file$d, 58, 2, 1162);
			attr_dev(button, "class", button_class_value = "toast-close " + /*type*/ ctx[1] + " s-csdrBJqpTpqa");
			attr_dev(button, "type", "button");
			attr_dev(button, "aria-label", "Close");
			attr_dev(button, "data-testid", "toast-close");
			add_location(button, file$d, 51, 1, 1028);
			attr_dev(div4, "class", div4_class_value = "timer " + /*type*/ ctx[1] + " s-csdrBJqpTpqa");
			add_location(div4, file$d, 61, 1, 1214);
			attr_dev(div5, "class", div5_class_value = "toast-body " + /*type*/ ctx[1] + " s-csdrBJqpTpqa");
			attr_dev(div5, "role", "alert");
			attr_dev(div5, "data-testid", "toast-body");
			add_location(div5, file$d, 25, 0, 504);
		},
		l: function claim(nodes) {
			throw new Error_1$1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div5, anchor);
			append_dev(div5, div0);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div0, null);
			}

			append_dev(div5, t0);
			append_dev(div5, div3);
			append_dev(div3, div1);
			append_dev(div1, t1);
			append_dev(div3, t2);
			append_dev(div3, div2);
			append_dev(div2, t3);
			append_dev(div5, t4);
			append_dev(div5, button);
			append_dev(button, span);
			append_dev(div5, t6);
			append_dev(div5, div4);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button, "click", /*close_message*/ ctx[2], false, false, false, false),
					listen_dev(div5, "click", stop_propagation(/*click_handler*/ ctx[4]), false, false, true, false),
					listen_dev(div5, "keydown", stop_propagation(/*keydown_handler*/ ctx[5]), false, false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index !== previous_block_index) {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					}

					transition_in(if_block, 1);
					if_block.m(div0, null);
				} else {
					if_block = null;
				}
			}

			if (!current || dirty & /*type*/ 2 && div0_class_value !== (div0_class_value = "toast-icon " + /*type*/ ctx[1] + " s-csdrBJqpTpqa")) {
				attr_dev(div0, "class", div0_class_value);
			}

			if (!current || dirty & /*type*/ 2) set_data_dev(t1, /*type*/ ctx[1]);

			if (!current || dirty & /*type*/ 2 && div1_class_value !== (div1_class_value = "toast-title " + /*type*/ ctx[1] + " s-csdrBJqpTpqa")) {
				attr_dev(div1, "class", div1_class_value);
			}

			if (!current || dirty & /*message*/ 1) set_data_dev(t3, /*message*/ ctx[0]);

			if (!current || dirty & /*type*/ 2 && div2_class_value !== (div2_class_value = "toast-text " + /*type*/ ctx[1] + " s-csdrBJqpTpqa")) {
				attr_dev(div2, "class", div2_class_value);
			}

			if (!current || dirty & /*type*/ 2 && div3_class_value !== (div3_class_value = "toast-details " + /*type*/ ctx[1] + " s-csdrBJqpTpqa")) {
				attr_dev(div3, "class", div3_class_value);
			}

			if (!current || dirty & /*type*/ 2 && button_class_value !== (button_class_value = "toast-close " + /*type*/ ctx[1] + " s-csdrBJqpTpqa")) {
				attr_dev(button, "class", button_class_value);
			}

			if (!current || dirty & /*type*/ 2 && div4_class_value !== (div4_class_value = "timer " + /*type*/ ctx[1] + " s-csdrBJqpTpqa")) {
				attr_dev(div4, "class", div4_class_value);
			}

			if (!current || dirty & /*type*/ 2 && div5_class_value !== (div5_class_value = "toast-body " + /*type*/ ctx[1] + " s-csdrBJqpTpqa")) {
				attr_dev(div5, "class", div5_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);

			if (local) {
				add_render_callback(() => {
					if (!current) return;
					if (div5_outro) div5_outro.end(1);
					div5_intro = create_in_transition(div5, fade, { duration: 200, delay: 100 });
					div5_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			if (div5_intro) div5_intro.invalidate();

			if (local) {
				div5_outro = create_out_transition(div5, fade, { duration: 200 });
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div5);
			}

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			if (detaching && div5_outro) div5_outro.end();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$i.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$i($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ToastContent', slots, []);
	let { message = "" } = $$props;
	let { type } = $$props;
	let { id } = $$props;
	const dispatch = createEventDispatcher();

	function close_message() {
		dispatch("close", id);
	}

	onMount(() => {
		setTimeout(
			() => {
				close_message();
			},
			10000
		);
	});

	$$self.$$.on_mount.push(function () {
		if (type === undefined && !('type' in $$props || $$self.$$.bound[$$self.$$.props['type']])) {
			console.warn("<ToastContent> was created without expected prop 'type'");
		}

		if (id === undefined && !('id' in $$props || $$self.$$.bound[$$self.$$.props['id']])) {
			console.warn("<ToastContent> was created without expected prop 'id'");
		}
	});

	const writable_props = ['message', 'type', 'id'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ToastContent> was created with unknown prop '${key}'`);
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('message' in $$props) $$invalidate(0, message = $$props.message);
		if ('type' in $$props) $$invalidate(1, type = $$props.type);
		if ('id' in $$props) $$invalidate(3, id = $$props.id);
	};

	$$self.$capture_state = () => ({
		Error: Error$1,
		Info,
		Warning,
		createEventDispatcher,
		onMount,
		fade,
		message,
		type,
		id,
		dispatch,
		close_message
	});

	$$self.$inject_state = $$props => {
		if ('message' in $$props) $$invalidate(0, message = $$props.message);
		if ('type' in $$props) $$invalidate(1, type = $$props.type);
		if ('id' in $$props) $$invalidate(3, id = $$props.id);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [message, type, close_message, id, click_handler, keydown_handler];
}

class ToastContent extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$i, create_fragment$i, safe_not_equal, { message: 0, type: 1, id: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ToastContent",
			options,
			id: create_fragment$i.name
		});
	}

	get message() {
		throw new Error_1$1("<ToastContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set message(value) {
		throw new Error_1$1("<ToastContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error_1$1("<ToastContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error_1$1("<ToastContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error_1$1("<ToastContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error_1$1("<ToastContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* Users/peterallen/Projects/gradio/js/statustracker/static/Toast.svelte generated by Svelte v4.0.0 */
const file$c = "Users/peterallen/Projects/gradio/js/statustracker/static/Toast.svelte";

function get_each_context$5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i].type;
	child_ctx[3] = list[i].message;
	child_ctx[4] = list[i].id;
	return child_ctx;
}

// (15:1) {#each messages as { type, message, id }
function create_each_block$5(key_1, ctx) {
	let div;
	let toastcontent;
	let t;
	let rect;
	let stop_animation = noop;
	let current;

	toastcontent = new ToastContent({
			props: {
				type: /*type*/ ctx[2],
				message: /*message*/ ctx[3],
				id: /*id*/ ctx[4]
			},
			$$inline: true
		});

	toastcontent.$on("close", /*close_handler*/ ctx[1]);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			div = element("div");
			create_component(toastcontent.$$.fragment);
			t = space();
			set_style(div, "width", `100%`);
			add_location(div, file$c, 20, 2, 422);
			this.first = div;
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(toastcontent, div, null);
			append_dev(div, t);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const toastcontent_changes = {};
			if (dirty & /*messages*/ 1) toastcontent_changes.type = /*type*/ ctx[2];
			if (dirty & /*messages*/ 1) toastcontent_changes.message = /*message*/ ctx[3];
			if (dirty & /*messages*/ 1) toastcontent_changes.id = /*id*/ ctx[4];
			toastcontent.$set(toastcontent_changes);
		},
		r: function measure() {
			rect = div.getBoundingClientRect();
		},
		f: function fix() {
			fix_position(div);
			stop_animation();
		},
		a: function animate() {
			stop_animation();
			stop_animation = create_animation(div, rect, flip, { duration: 300 });
		},
		i: function intro(local) {
			if (current) return;
			transition_in(toastcontent.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(toastcontent.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(toastcontent);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$5.name,
		type: "each",
		source: "(15:1) {#each messages as { type, message, id }",
		ctx
	});

	return block;
}

function create_fragment$h(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let each_value = ensure_array_like_dev(/*messages*/ ctx[0]);
	const get_key = ctx => /*id*/ ctx[4];
	validate_each_keys(ctx, each_value, get_each_context$5, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$5(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$5(key, child_ctx));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "toast-wrap s-i8MyqYWyaELK");
			add_location(div, file$c, 18, 0, 347);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*messages*/ 1) {
				each_value = ensure_array_like_dev(/*messages*/ ctx[0]);
				group_outros();
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
				validate_each_keys(ctx, each_value, get_each_context$5, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, fix_and_outro_and_destroy_block, create_each_block$5, null, get_each_context$5);
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$h.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function scroll_to_top(_messages) {
	if (_messages.length > 0) {
		if ("parentIFrame" in window) {
			window.parentIFrame?.scrollTo(0, 0);
		}
	}
}

function instance$h($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Toast', slots, []);
	let { messages = [] } = $$props;
	const writable_props = ['messages'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Toast> was created with unknown prop '${key}'`);
	});

	function close_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('messages' in $$props) $$invalidate(0, messages = $$props.messages);
	};

	$$self.$capture_state = () => ({
		flip,
		ToastContent,
		messages,
		scroll_to_top
	});

	$$self.$inject_state = $$props => {
		if ('messages' in $$props) $$invalidate(0, messages = $$props.messages);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*messages*/ 1) {
			scroll_to_top(messages);
		}
	};

	return [messages, close_handler];
}

class Toast extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$h, create_fragment$h, safe_not_equal, { messages: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Toast",
			options,
			id: create_fragment$h.name
		});
	}

	get messages() {
		throw new Error("<Toast>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set messages(value) {
		throw new Error("<Toast>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const JsonView_svelte_svelte_type_style_lang = '';

/* Users/peterallen/Projects/gradio/node_modules/.pnpm/@zerodevx+svelte-json-view@1.0.7_svelte@4.2.0/node_modules/@zerodevx/svelte-json-view/JsonView.svelte generated by Svelte v4.0.0 */

const { Object: Object_1$2 } = globals;
const file$b = "Users/peterallen/Projects/gradio/node_modules/.pnpm/@zerodevx+svelte-json-view@1.0.7_svelte@4.2.0/node_modules/@zerodevx/svelte-json-view/JsonView.svelte";

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	child_ctx[12] = i;
	return child_ctx;
}

// (69:0) {:else}
function create_else_block$4(ctx) {
	let span0;
	let t0_value = /*brackets*/ ctx[6][0] + "";
	let t0;
	let t1;
	let ul;
	let t2;
	let span1;
	let t3_value = /*brackets*/ ctx[6][1] + "";
	let t3;
	let if_block_anchor;
	let current;
	let mounted;
	let dispose;
	let each_value = ensure_array_like_dev(/*items*/ ctx[5]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let if_block = !/*_last*/ ctx[3] && create_if_block_4$4(ctx);

	const block = {
		c: function create() {
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			span1 = element("span");
			t3 = text(t3_value);
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr_dev(span0, "class", "_jsonBkt s-XUUEZ_zt-b2Z");
			attr_dev(span0, "role", "button");
			attr_dev(span0, "tabindex", "0");
			toggle_class(span0, "isArray", /*isArray*/ ctx[4]);
			add_location(span0, file$b, 69, 2, 1423);
			attr_dev(ul, "class", "_jsonList s-XUUEZ_zt-b2Z");
			add_location(ul, file$b, 77, 2, 1577);
			attr_dev(span1, "class", "_jsonBkt s-XUUEZ_zt-b2Z");
			attr_dev(span1, "role", "button");
			attr_dev(span1, "tabindex", "0");
			toggle_class(span1, "isArray", /*isArray*/ ctx[4]);
			add_location(span1, file$b, 92, 2, 2111);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span0, anchor);
			append_dev(span0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(ul, null);
				}
			}

			insert_dev(target, t2, anchor);
			insert_dev(target, span1, anchor);
			append_dev(span1, t3);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(span0, "click", /*clicked*/ ctx[8], false, false, false, false),
					listen_dev(span0, "keydown", /*pressed*/ ctx[9], false, false, false, false),
					listen_dev(span1, "click", /*clicked*/ ctx[8], false, false, false, false),
					listen_dev(span1, "keydown", /*pressed*/ ctx[9], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty & /*brackets*/ 64) && t0_value !== (t0_value = /*brackets*/ ctx[6][0] + "")) set_data_dev(t0, t0_value);

			if (!current || dirty & /*isArray*/ 16) {
				toggle_class(span0, "isArray", /*isArray*/ ctx[4]);
			}

			if (dirty & /*json, items, depth, _cur, getType, format, isArray*/ 55) {
				each_value = ensure_array_like_dev(/*items*/ ctx[5]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$4(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$4(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if ((!current || dirty & /*brackets*/ 64) && t3_value !== (t3_value = /*brackets*/ ctx[6][1] + "")) set_data_dev(t3, t3_value);

			if (!current || dirty & /*isArray*/ 16) {
				toggle_class(span1, "isArray", /*isArray*/ ctx[4]);
			}

			if (!/*_last*/ ctx[3]) {
				if (if_block) ; else {
					if_block = create_if_block_4$4(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span0);
				detach_dev(t1);
				detach_dev(ul);
				detach_dev(t2);
				detach_dev(span1);
				detach_dev(if_block_anchor);
			}

			destroy_each(each_blocks, detaching);
			if (if_block) if_block.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$4.name,
		type: "else",
		source: "(69:0) {:else}",
		ctx
	});

	return block;
}

// (60:20) 
function create_if_block_2$4(ctx) {
	let span;
	let t0_value = /*brackets*/ ctx[6][0] + "";
	let t0;
	let t1;
	let t2_value = /*brackets*/ ctx[6][1] + "";
	let t2;
	let if_block_anchor;
	let mounted;
	let dispose;
	let if_block = !/*_last*/ ctx[3] && /*collapsed*/ ctx[7] && create_if_block_3$4(ctx);

	const block = {
		c: function create() {
			span = element("span");
			t0 = text(t0_value);
			t1 = text("...");
			t2 = text(t2_value);
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr_dev(span, "class", "_jsonBkt s-XUUEZ_zt-b2Z");
			attr_dev(span, "role", "button");
			attr_dev(span, "tabindex", "0");
			toggle_class(span, "isArray", /*isArray*/ ctx[4]);
			add_location(span, file$b, 60, 2, 1184);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			append_dev(span, t1);
			append_dev(span, t2);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(span, "click", /*clicked*/ ctx[8], false, false, false, false),
					listen_dev(span, "keydown", /*pressed*/ ctx[9], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*brackets*/ 64 && t0_value !== (t0_value = /*brackets*/ ctx[6][0] + "")) set_data_dev(t0, t0_value);
			if (dirty & /*brackets*/ 64 && t2_value !== (t2_value = /*brackets*/ ctx[6][1] + "")) set_data_dev(t2, t2_value);

			if (dirty & /*isArray*/ 16) {
				toggle_class(span, "isArray", /*isArray*/ ctx[4]);
			}

			if (!/*_last*/ ctx[3] && /*collapsed*/ ctx[7]) {
				if (if_block) ; else {
					if_block = create_if_block_3$4(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
				detach_dev(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$4.name,
		type: "if",
		source: "(60:20) ",
		ctx
	});

	return block;
}

// (56:0) {#if !items.length}
function create_if_block$8(ctx) {
	let span;
	let t0_value = /*brackets*/ ctx[6][0] + "";
	let t0;
	let t1_value = /*brackets*/ ctx[6][1] + "";
	let t1;
	let if_block_anchor;
	let if_block = !/*_last*/ ctx[3] && create_if_block_1$5(ctx);

	const block = {
		c: function create() {
			span = element("span");
			t0 = text(t0_value);
			t1 = text(t1_value);
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr_dev(span, "class", "_jsonBkt empty s-XUUEZ_zt-b2Z");
			toggle_class(span, "isArray", /*isArray*/ ctx[4]);
			add_location(span, file$b, 56, 2, 1025);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			append_dev(span, t1);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*brackets*/ 64 && t0_value !== (t0_value = /*brackets*/ ctx[6][0] + "")) set_data_dev(t0, t0_value);
			if (dirty & /*brackets*/ 64 && t1_value !== (t1_value = /*brackets*/ ctx[6][1] + "")) set_data_dev(t1, t1_value);

			if (dirty & /*isArray*/ 16) {
				toggle_class(span, "isArray", /*isArray*/ ctx[4]);
			}

			if (!/*_last*/ ctx[3]) {
				if (if_block) ; else {
					if_block = create_if_block_1$5(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
				detach_dev(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$8.name,
		type: "if",
		source: "(56:0) {#if !items.length}",
		ctx
	});

	return block;
}

// (81:8) {#if !isArray}
function create_if_block_7$1(ctx) {
	let span0;
	let t0;
	let t1_value = /*i*/ ctx[10] + "";
	let t1;
	let t2;
	let span1;

	const block = {
		c: function create() {
			span0 = element("span");
			t0 = text("\"");
			t1 = text(t1_value);
			t2 = text("\"");
			span1 = element("span");
			span1.textContent = ":";
			attr_dev(span0, "class", "_jsonKey s-XUUEZ_zt-b2Z");
			add_location(span0, file$b, 81, 10, 1672);
			attr_dev(span1, "class", "_jsonSep s-XUUEZ_zt-b2Z");
			add_location(span1, file$b, 81, 45, 1707);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span0, anchor);
			append_dev(span0, t0);
			append_dev(span0, t1);
			append_dev(span0, t2);
			insert_dev(target, span1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*items*/ 32 && t1_value !== (t1_value = /*i*/ ctx[10] + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span0);
				detach_dev(span1);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7$1.name,
		type: "if",
		source: "(81:8) {#if !isArray}",
		ctx
	});

	return block;
}

// (86:8) {:else}
function create_else_block_1$1(ctx) {
	let span;
	let t_value = format(/*json*/ ctx[0][/*i*/ ctx[10]]) + "";
	let t;
	let span_class_value;
	let if_block_anchor;
	let if_block = /*idx*/ ctx[12] < /*items*/ ctx[5].length - 1 && create_if_block_6$2(ctx);

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr_dev(span, "class", span_class_value = "_jsonVal " + getType(/*json*/ ctx[0][/*i*/ ctx[10]]) + " s-XUUEZ_zt-b2Z");
			add_location(span, file$b, 86, 10, 1921);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*json, items*/ 33 && t_value !== (t_value = format(/*json*/ ctx[0][/*i*/ ctx[10]]) + "")) set_data_dev(t, t_value);

			if (dirty & /*json, items*/ 33 && span_class_value !== (span_class_value = "_jsonVal " + getType(/*json*/ ctx[0][/*i*/ ctx[10]]) + " s-XUUEZ_zt-b2Z")) {
				attr_dev(span, "class", span_class_value);
			}

			if (/*idx*/ ctx[12] < /*items*/ ctx[5].length - 1) {
				if (if_block) ; else {
					if_block = create_if_block_6$2(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
				detach_dev(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1$1.name,
		type: "else",
		source: "(86:8) {:else}",
		ctx
	});

	return block;
}

// (84:8) {#if getType(json[i]) === 'object'}
function create_if_block_5$3(ctx) {
	let jsonview;
	let current;

	jsonview = new JsonView({
			props: {
				json: /*json*/ ctx[0][/*i*/ ctx[10]],
				depth: /*depth*/ ctx[1],
				_cur: /*_cur*/ ctx[2] + 1,
				_last: /*idx*/ ctx[12] === /*items*/ ctx[5].length - 1
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(jsonview.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(jsonview, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const jsonview_changes = {};
			if (dirty & /*json, items*/ 33) jsonview_changes.json = /*json*/ ctx[0][/*i*/ ctx[10]];
			if (dirty & /*depth*/ 2) jsonview_changes.depth = /*depth*/ ctx[1];
			if (dirty & /*_cur*/ 4) jsonview_changes._cur = /*_cur*/ ctx[2] + 1;
			if (dirty & /*items*/ 32) jsonview_changes._last = /*idx*/ ctx[12] === /*items*/ ctx[5].length - 1;
			jsonview.$set(jsonview_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(jsonview.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(jsonview.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(jsonview, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5$3.name,
		type: "if",
		source: "(84:8) {#if getType(json[i]) === 'object'}",
		ctx
	});

	return block;
}

// (88:11) {#if idx < items.length - 1}
function create_if_block_6$2(ctx) {
	let span;

	const block = {
		c: function create() {
			span = element("span");
			span.textContent = ",";
			attr_dev(span, "class", "_jsonSep s-XUUEZ_zt-b2Z");
			add_location(span, file$b, 87, 39, 2026);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6$2.name,
		type: "if",
		source: "(88:11) {#if idx < items.length - 1}",
		ctx
	});

	return block;
}

// (79:4) {#each items as i, idx}
function create_each_block$4(ctx) {
	let li;
	let t0;
	let show_if;
	let current_block_type_index;
	let if_block1;
	let t1;
	let current;
	let if_block0 = !/*isArray*/ ctx[4] && create_if_block_7$1(ctx);
	const if_block_creators = [create_if_block_5$3, create_else_block_1$1];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (dirty & /*json, items*/ 33) show_if = null;
		if (show_if == null) show_if = !!(getType(/*json*/ ctx[0][/*i*/ ctx[10]]) === 'object');
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, -1);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			li = element("li");
			if (if_block0) if_block0.c();
			t0 = space();
			if_block1.c();
			t1 = space();
			attr_dev(li, "class", "s-XUUEZ_zt-b2Z");
			add_location(li, file$b, 79, 6, 1634);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			if (if_block0) if_block0.m(li, null);
			append_dev(li, t0);
			if_blocks[current_block_type_index].m(li, null);
			append_dev(li, t1);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!/*isArray*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_7$1(ctx);
					if_block0.c();
					if_block0.m(li, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(li, t1);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(li);
			}

			if (if_block0) if_block0.d();
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$4.name,
		type: "each",
		source: "(79:4) {#each items as i, idx}",
		ctx
	});

	return block;
}

// (100:3) {#if !_last}
function create_if_block_4$4(ctx) {
	let span;

	const block = {
		c: function create() {
			span = element("span");
			span.textContent = ",";
			attr_dev(span, "class", "_jsonSep s-XUUEZ_zt-b2Z");
			add_location(span, file$b, 99, 15, 2274);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$4.name,
		type: "if",
		source: "(100:3) {#if !_last}",
		ctx
	});

	return block;
}

// (68:3) {#if !_last && collapsed}
function create_if_block_3$4(ctx) {
	let span;

	const block = {
		c: function create() {
			span = element("span");
			span.textContent = ",";
			attr_dev(span, "class", "_jsonSep s-XUUEZ_zt-b2Z");
			add_location(span, file$b, 67, 28, 1376);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$4.name,
		type: "if",
		source: "(68:3) {#if !_last && collapsed}",
		ctx
	});

	return block;
}

// (57:78) {#if !_last}
function create_if_block_1$5(ctx) {
	let span;

	const block = {
		c: function create() {
			span = element("span");
			span.textContent = ",";
			attr_dev(span, "class", "_jsonSep s-XUUEZ_zt-b2Z");
			add_location(span, file$b, 56, 90, 1113);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$5.name,
		type: "if",
		source: "(57:78) {#if !_last}",
		ctx
	});

	return block;
}

function create_fragment$g(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$8, create_if_block_2$4, create_else_block$4];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*items*/ ctx[5].length) return 0;
		if (/*collapsed*/ ctx[7]) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if_blocks[current_block_type_index].d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$g.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function getType(i) {
	if (i === null) return 'null';
	return typeof i;
}

/**
 * @param {*} i
 * @returns {string}
 */
function format(i) {
	const t = getType(i);
	if (t === 'string') return `"${i}"`;
	if (t === 'function') return 'f () {...}';
	if (t === 'symbol') return i.toString();
	return i;
}

function instance$g($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('JsonView', slots, []);
	let { json } = $$props;
	let { depth = Infinity } = $$props;
	let { _cur = 0 } = $$props;
	let { _last = true } = $$props;

	/** @type {*[]} */
	let items;

	let isArray = false;
	let brackets = ['', ''];
	let collapsed = false;

	function clicked() {
		$$invalidate(7, collapsed = !collapsed);
	}

	/**
 * @param {Event} e
 */
	function pressed(e) {
		if (e instanceof KeyboardEvent && ['Enter', ' '].includes(e.key)) clicked();
	}

	$$self.$$.on_mount.push(function () {
		if (json === undefined && !('json' in $$props || $$self.$$.bound[$$self.$$.props['json']])) {
			console.warn("<JsonView> was created without expected prop 'json'");
		}
	});

	const writable_props = ['json', 'depth', '_cur', '_last'];

	Object_1$2.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<JsonView> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('json' in $$props) $$invalidate(0, json = $$props.json);
		if ('depth' in $$props) $$invalidate(1, depth = $$props.depth);
		if ('_cur' in $$props) $$invalidate(2, _cur = $$props._cur);
		if ('_last' in $$props) $$invalidate(3, _last = $$props._last);
	};

	$$self.$capture_state = () => ({
		json,
		depth,
		_cur,
		_last,
		items,
		isArray,
		brackets,
		collapsed,
		getType,
		format,
		clicked,
		pressed
	});

	$$self.$inject_state = $$props => {
		if ('json' in $$props) $$invalidate(0, json = $$props.json);
		if ('depth' in $$props) $$invalidate(1, depth = $$props.depth);
		if ('_cur' in $$props) $$invalidate(2, _cur = $$props._cur);
		if ('_last' in $$props) $$invalidate(3, _last = $$props._last);
		if ('items' in $$props) $$invalidate(5, items = $$props.items);
		if ('isArray' in $$props) $$invalidate(4, isArray = $$props.isArray);
		if ('brackets' in $$props) $$invalidate(6, brackets = $$props.brackets);
		if ('collapsed' in $$props) $$invalidate(7, collapsed = $$props.collapsed);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*json, isArray*/ 17) {
			{
				$$invalidate(5, items = getType(json) === 'object' ? Object.keys(json) : []);
				$$invalidate(4, isArray = Array.isArray(json));
				$$invalidate(6, brackets = isArray ? ['[', ']'] : ['{', '}']);
			}
		}

		if ($$self.$$.dirty & /*depth, _cur*/ 6) {
			$$invalidate(7, collapsed = depth < _cur);
		}
	};

	return [
		json,
		depth,
		_cur,
		_last,
		isArray,
		items,
		brackets,
		collapsed,
		clicked,
		pressed
	];
}

class JsonView extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$g, create_fragment$g, safe_not_equal, { json: 0, depth: 1, _cur: 2, _last: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "JsonView",
			options,
			id: create_fragment$g.name
		});
	}

	get json() {
		throw new Error("<JsonView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set json(value) {
		throw new Error("<JsonView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get depth() {
		throw new Error("<JsonView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set depth(value) {
		throw new Error("<JsonView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get _cur() {
		throw new Error("<JsonView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set _cur(value) {
		throw new Error("<JsonView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get _last() {
		throw new Error("<JsonView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set _last(value) {
		throw new Error("<JsonView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* Users/peterallen/Projects/gradio/js/fallback/interactive/InteractiveFallback.svelte generated by Svelte v4.0.0 */

// (18:0) <Block {visible} {elem_id} {elem_classes} {container} {scale} {min_width}>
function create_default_slot$7(ctx) {
	let statustracker;
	let t;
	let jsonview;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[8].autoscroll },
		{ i18n: /*gradio*/ ctx[8].i18n },
		/*loading_status*/ ctx[7]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	jsonview = new JsonView({
			props: { json: /*value*/ ctx[3] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(jsonview.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(jsonview, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 384)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 256 && { autoscroll: /*gradio*/ ctx[8].autoscroll },
					dirty & /*gradio*/ 256 && { i18n: /*gradio*/ ctx[8].i18n },
					dirty & /*loading_status*/ 128 && get_spread_object(/*loading_status*/ ctx[7])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const jsonview_changes = {};
			if (dirty & /*value*/ 8) jsonview_changes.json = /*value*/ ctx[3];
			jsonview.$set(jsonview_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(jsonview.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(jsonview.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(jsonview, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$7.name,
		type: "slot",
		source: "(18:0) <Block {visible} {elem_id} {elem_classes} {container} {scale} {min_width}>",
		ctx
	});

	return block;
}

function create_fragment$f(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[2],
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				container: /*container*/ ctx[4],
				scale: /*scale*/ ctx[5],
				min_width: /*min_width*/ ctx[6],
				$$slots: { default: [create_default_slot$7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 4) block_changes.visible = /*visible*/ ctx[2];
			if (dirty & /*elem_id*/ 1) block_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) block_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty & /*container*/ 16) block_changes.container = /*container*/ ctx[4];
			if (dirty & /*scale*/ 32) block_changes.scale = /*scale*/ ctx[5];
			if (dirty & /*min_width*/ 64) block_changes.min_width = /*min_width*/ ctx[6];

			if (dirty & /*$$scope, value, gradio, loading_status*/ 904) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment$f.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance$f($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('InteractiveFallback', slots, []);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = false } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { loading_status } = $$props;
	let { gradio } = $$props;

	$$self.$$.on_mount.push(function () {
		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<InteractiveFallback> was created without expected prop 'loading_status'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<InteractiveFallback> was created without expected prop 'gradio'");
		}
	});

	const writable_props = [
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'container',
		'scale',
		'min_width',
		'loading_status',
		'gradio'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InteractiveFallback> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('container' in $$props) $$invalidate(4, container = $$props.container);
		if ('scale' in $$props) $$invalidate(5, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(6, min_width = $$props.min_width);
		if ('loading_status' in $$props) $$invalidate(7, loading_status = $$props.loading_status);
		if ('gradio' in $$props) $$invalidate(8, gradio = $$props.gradio);
	};

	$$self.$capture_state = () => ({
		JsonView,
		Block,
		Info: Info$1,
		StatusTracker: Static,
		elem_id,
		elem_classes,
		visible,
		value,
		container,
		scale,
		min_width,
		loading_status,
		gradio
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('container' in $$props) $$invalidate(4, container = $$props.container);
		if ('scale' in $$props) $$invalidate(5, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(6, min_width = $$props.min_width);
		if ('loading_status' in $$props) $$invalidate(7, loading_status = $$props.loading_status);
		if ('gradio' in $$props) $$invalidate(8, gradio = $$props.gradio);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		elem_id,
		elem_classes,
		visible,
		value,
		container,
		scale,
		min_width,
		loading_status,
		gradio
	];
}

class InteractiveFallback extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$f, create_fragment$f, safe_not_equal, {
			elem_id: 0,
			elem_classes: 1,
			visible: 2,
			value: 3,
			container: 4,
			scale: 5,
			min_width: 6,
			loading_status: 7,
			gradio: 8
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "InteractiveFallback",
			options,
			id: create_fragment$f.name
		});
	}

	get elem_id() {
		throw new Error("<InteractiveFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<InteractiveFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<InteractiveFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<InteractiveFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<InteractiveFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<InteractiveFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<InteractiveFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<InteractiveFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get container() {
		throw new Error("<InteractiveFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set container(value) {
		throw new Error("<InteractiveFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<InteractiveFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<InteractiveFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<InteractiveFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<InteractiveFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<InteractiveFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<InteractiveFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gradio() {
		throw new Error("<InteractiveFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<InteractiveFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* Users/peterallen/Projects/gradio/js/fallback/static/StaticFallback.svelte generated by Svelte v4.0.0 */

// (18:0) <Block {visible} {elem_id} {elem_classes} {container} {scale} {min_width}>
function create_default_slot$6(ctx) {
	let statustracker;
	let t;
	let jsonview;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[8].autoscroll },
		{ i18n: /*gradio*/ ctx[8].i18n },
		/*loading_status*/ ctx[7]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	jsonview = new JsonView({
			props: { json: /*value*/ ctx[3] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(jsonview.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(jsonview, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 384)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 256 && { autoscroll: /*gradio*/ ctx[8].autoscroll },
					dirty & /*gradio*/ 256 && { i18n: /*gradio*/ ctx[8].i18n },
					dirty & /*loading_status*/ 128 && get_spread_object(/*loading_status*/ ctx[7])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const jsonview_changes = {};
			if (dirty & /*value*/ 8) jsonview_changes.json = /*value*/ ctx[3];
			jsonview.$set(jsonview_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(jsonview.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(jsonview.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(jsonview, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$6.name,
		type: "slot",
		source: "(18:0) <Block {visible} {elem_id} {elem_classes} {container} {scale} {min_width}>",
		ctx
	});

	return block;
}

function create_fragment$e(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[2],
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				container: /*container*/ ctx[4],
				scale: /*scale*/ ctx[5],
				min_width: /*min_width*/ ctx[6],
				$$slots: { default: [create_default_slot$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 4) block_changes.visible = /*visible*/ ctx[2];
			if (dirty & /*elem_id*/ 1) block_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) block_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty & /*container*/ 16) block_changes.container = /*container*/ ctx[4];
			if (dirty & /*scale*/ 32) block_changes.scale = /*scale*/ ctx[5];
			if (dirty & /*min_width*/ 64) block_changes.min_width = /*min_width*/ ctx[6];

			if (dirty & /*$$scope, value, gradio, loading_status*/ 904) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment$e.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance$e($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticFallback', slots, []);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = false } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { loading_status } = $$props;
	let { gradio } = $$props;

	$$self.$$.on_mount.push(function () {
		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<StaticFallback> was created without expected prop 'loading_status'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticFallback> was created without expected prop 'gradio'");
		}
	});

	const writable_props = [
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'container',
		'scale',
		'min_width',
		'loading_status',
		'gradio'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticFallback> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('container' in $$props) $$invalidate(4, container = $$props.container);
		if ('scale' in $$props) $$invalidate(5, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(6, min_width = $$props.min_width);
		if ('loading_status' in $$props) $$invalidate(7, loading_status = $$props.loading_status);
		if ('gradio' in $$props) $$invalidate(8, gradio = $$props.gradio);
	};

	$$self.$capture_state = () => ({
		JsonView,
		Block,
		Info: Info$1,
		StatusTracker: Static,
		elem_id,
		elem_classes,
		visible,
		value,
		container,
		scale,
		min_width,
		loading_status,
		gradio
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('container' in $$props) $$invalidate(4, container = $$props.container);
		if ('scale' in $$props) $$invalidate(5, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(6, min_width = $$props.min_width);
		if ('loading_status' in $$props) $$invalidate(7, loading_status = $$props.loading_status);
		if ('gradio' in $$props) $$invalidate(8, gradio = $$props.gradio);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		elem_id,
		elem_classes,
		visible,
		value,
		container,
		scale,
		min_width,
		loading_status,
		gradio
	];
}

class StaticFallback extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
			elem_id: 0,
			elem_classes: 1,
			visible: 2,
			value: 3,
			container: 4,
			scale: 5,
			min_width: 6,
			loading_status: 7,
			gradio: 8
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticFallback",
			options,
			id: create_fragment$e.name
		});
	}

	get elem_id() {
		throw new Error("<StaticFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<StaticFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<StaticFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<StaticFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<StaticFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<StaticFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<StaticFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<StaticFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get container() {
		throw new Error("<StaticFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set container(value) {
		throw new Error("<StaticFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<StaticFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<StaticFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<StaticFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<StaticFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<StaticFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<StaticFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gradio() {
		throw new Error("<StaticFallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<StaticFallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Fallback_svelte_svelte_type_style_lang = '';

/* Users/peterallen/Projects/gradio/js/fallback/example/Fallback.svelte generated by Svelte v4.0.0 */

const file$a = "Users/peterallen/Projects/gradio/js/fallback/example/Fallback.svelte";

function create_fragment$d(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*value*/ ctx[0]);
			attr_dev(div, "class", "s-pDfweyJNWSN3");
			toggle_class(div, "table", /*type*/ ctx[1] === "table");
			toggle_class(div, "gallery", /*type*/ ctx[1] === "gallery");
			toggle_class(div, "selected", /*selected*/ ctx[2]);
			add_location(div, file$a, 6, 0, 93);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*value*/ 1) set_data_dev(t, /*value*/ ctx[0]);

			if (dirty & /*type*/ 2) {
				toggle_class(div, "table", /*type*/ ctx[1] === "table");
			}

			if (dirty & /*type*/ 2) {
				toggle_class(div, "gallery", /*type*/ ctx[1] === "gallery");
			}

			if (dirty & /*selected*/ 4) {
				toggle_class(div, "selected", /*selected*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$d.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$d($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Fallback', slots, []);
	let { value } = $$props;
	let { type } = $$props;
	let { selected = false } = $$props;

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<Fallback> was created without expected prop 'value'");
		}

		if (type === undefined && !('type' in $$props || $$self.$$.bound[$$self.$$.props['type']])) {
			console.warn("<Fallback> was created without expected prop 'type'");
		}
	});

	const writable_props = ['value', 'type', 'selected'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Fallback> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('type' in $$props) $$invalidate(1, type = $$props.type);
		if ('selected' in $$props) $$invalidate(2, selected = $$props.selected);
	};

	$$self.$capture_state = () => ({ value, type, selected });

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('type' in $$props) $$invalidate(1, type = $$props.type);
		if ('selected' in $$props) $$invalidate(2, selected = $$props.selected);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, type, selected];
}

class Fallback extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$d, create_fragment$d, safe_not_equal, { value: 0, type: 1, selected: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Fallback",
			options,
			id: create_fragment$d.name
		});
	}

	get value() {
		throw new Error("<Fallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Fallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Fallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Fallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selected() {
		throw new Error("<Fallback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selected(value) {
		throw new Error("<Fallback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const component_map = {
  accordion: {
    static: () => __vitePreload(() => import('./index-25154894.js'),true?["./index-25154894.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./index-0cfc7b99.js","./index-6fd2ac73.css","./index-40b8118e.css"]:void 0,import.meta.url)
  },
  annotatedimage: {
    static: () => __vitePreload(() => import('./index-0f918312.js'),true?["./index-0f918312.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockLabel-6e86bddb.js","./Empty-1dddf04e.js","./Image-3675b397.js","./index-aae5b921.css"]:void 0,import.meta.url)
  },
  audio: {
    static: () => __vitePreload(() => import('./index-1eee1595.js'),true?["./index-1eee1595.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockLabel-6e86bddb.js","./IconButton-a7cec4e3.js","./Empty-1dddf04e.js","./ShareButton-67809009.js","./Download-4ba7429d.js","./utils-8600432e.js","./index-043ded93.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-f1e452c9.js'),true?["./index-f1e452c9.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./UploadText-5bbd5d92.js","./Upload-3fd97bb0.js","./ModifyUpload-aa8b58d9.js","./IconButton-a7cec4e3.js","./Undo-863e44da.js","./BlockLabel-6e86bddb.js","./utils-8600432e.js","./index-263e7e67.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-953f33e6.js'),true?["./index-953f33e6.js","./index-ae99fd72.css"]:void 0,import.meta.url)
  },
  box: {
    static: () => __vitePreload(() => import('./index-d67f2df7.js'),true?["./index-d67f2df7.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css"]:void 0,import.meta.url)
  },
  button: {
    static: () => __vitePreload(() => import('./index-b2ec196d.js'),true?["./index-b2ec196d.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css"]:void 0,import.meta.url)
  },
  chatbot: {
    static: () => __vitePreload(() => import('./index-686f3f97.js'),true?["./index-686f3f97.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./ShareButton-67809009.js","./IconButton-a7cec4e3.js","./StaticMarkdown-08860037.js","./StaticMarkdown-28ef77f1.css","./Copy-51753e2b.js","./BlockLabel-6e86bddb.js","./index-59f9e493.css"]:void 0,import.meta.url)
  },
  checkbox: {
    static: () => __vitePreload(() => import('./index-9403b4ed.js'),true?["./index-9403b4ed.js","./Checkbox-38565272.js","./Checkbox-d7926d01.css","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-263439c2.js'),true?["./index-263439c2.js","./Checkbox-38565272.js","./Checkbox-d7926d01.css","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-3d004c9a.js'),true?["./index-3d004c9a.js","./index-42bc9368.css"]:void 0,import.meta.url)
  },
  checkboxgroup: {
    static: () => __vitePreload(() => import('./index-e52e5f58.js'),true?["./index-e52e5f58.js","./Checkboxgroup-d360cca2.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./Checkboxgroup-268b6303.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-c5bbf580.js'),true?["./index-c5bbf580.js","./Checkboxgroup-d360cca2.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./Checkboxgroup-268b6303.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-91d22bbc.js'),true?["./index-91d22bbc.js","./index-27576905.css"]:void 0,import.meta.url)
  },
  code: {
    static: () => __vitePreload(() => import('./index-ac42619a.js'),true?["./index-ac42619a.js","./Widgets.svelte_svelte_type_style_lang-5c58cf7f.js","./index-30423ace.js","./index-7d858894.css","./Widgets-e9405510.css","./Button-153ea7e7.js","./Button-d1784ebc.css","./Copy-51753e2b.js","./Download-4ba7429d.js","./BlockLabel-6e86bddb.js","./Empty-1dddf04e.js"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-78709e39.js'),true?["./index-78709e39.js","./Widgets.svelte_svelte_type_style_lang-5c58cf7f.js","./index-30423ace.js","./index-7d858894.css","./Widgets-e9405510.css","./Button-153ea7e7.js","./Button-d1784ebc.css","./BlockLabel-6e86bddb.js"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-2124b4c4.js'),true?["./index-2124b4c4.js","./index-2713317d.css"]:void 0,import.meta.url)
  },
  colorpicker: {
    static: () => __vitePreload(() => import('./index-cb747576.js'),true?["./index-cb747576.js","./Colorpicker-35be5485.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./Colorpicker-22df965f.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-d87a8bc7.js'),true?["./index-d87a8bc7.js","./Colorpicker-35be5485.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./Colorpicker-22df965f.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-6542307b.js'),true?["./index-6542307b.js","./index-4236ee51.css"]:void 0,import.meta.url)
  },
  column: {
    static: () => __vitePreload(() => import('./index-0cfc7b99.js'),true?["./index-0cfc7b99.js","./index-6fd2ac73.css"]:void 0,import.meta.url)
  },
  dataframe: {
    static: () => __vitePreload(() => import('./index-a5d450d7.js'),true?["./index-a5d450d7.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./Table-de0720f2.js","./Upload-3fd97bb0.js","./StaticMarkdown-08860037.js","./StaticMarkdown-28ef77f1.css","./dsv-a37bb3db.js","./Table-ca3fb881.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-ff4be2f5.js'),true?["./index-ff4be2f5.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./Table-de0720f2.js","./Upload-3fd97bb0.js","./StaticMarkdown-08860037.js","./StaticMarkdown-28ef77f1.css","./dsv-a37bb3db.js","./Table-ca3fb881.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-da78ccd1.js'),true?["./index-da78ccd1.js","./dsv-a37bb3db.js","./index-6015017b.css"]:void 0,import.meta.url)
  },
  dataset: {
    static: () => __vitePreload(() => import('./index-22e3a624.js'),true?["./index-22e3a624.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./index-20f46bf3.css"]:void 0,import.meta.url)
  },
  dropdown: {
    static: () => __vitePreload(() => import('./index-10f721ca.js'),true?["./index-10f721ca.js","./Multiselect-4d348364.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./Multiselect-d6296e1a.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-79357fe9.js'),true?["./index-79357fe9.js","./Multiselect-4d348364.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./Multiselect-d6296e1a.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-f77037d0.js'),true?["./index-f77037d0.js","./index-850aded1.css"]:void 0,import.meta.url)
  },
  file: {
    static: () => __vitePreload(() => import('./index-fc1b9518.js'),true?["./index-fc1b9518.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockLabel-6e86bddb.js","./Empty-1dddf04e.js","./File-42c5d0dc.js","./FilePreview-145e6318.js","./FilePreview-3031a35b.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-7e3938a2.js'),true?["./index-7e3938a2.js","./Upload-3fd97bb0.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./ModifyUpload-aa8b58d9.js","./IconButton-a7cec4e3.js","./Undo-863e44da.js","./BlockLabel-6e86bddb.js","./File-42c5d0dc.js","./FilePreview-145e6318.js","./FilePreview-3031a35b.css","./UploadText-5bbd5d92.js"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-c3378997.js'),true?["./index-c3378997.js","./index-78a946b0.css"]:void 0,import.meta.url)
  },
  form: {
    static: () => __vitePreload(() => import('./index-5f1460d6.js'),true?["./index-5f1460d6.js","./index-40719bad.css"]:void 0,import.meta.url)
  },
  gallery: {
    static: () => __vitePreload(() => import('./index-c80a8687.js'),true?["./index-c80a8687.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockLabel-6e86bddb.js","./IconButton-a7cec4e3.js","./Empty-1dddf04e.js","./ShareButton-67809009.js","./ModifyUpload-aa8b58d9.js","./Undo-863e44da.js","./Download-4ba7429d.js","./Image-3675b397.js","./index-5c72c4e2.css"]:void 0,import.meta.url)
  },
  group: {
    static: () => __vitePreload(() => import('./index-193b52a2.js'),true?["./index-193b52a2.js","./index-1c343c9a.css"]:void 0,import.meta.url)
  },
  highlightedtext: {
    static: () => __vitePreload(() => import('./index-fc88fbf1.js'),true?["./index-fc88fbf1.js","./color-6013ae7e.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./utils-202ce5b9.js","./BlockLabel-6e86bddb.js","./Empty-1dddf04e.js","./index-b966a8f6.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-92cb2f38.js'),true?["./index-92cb2f38.js","./color-6013ae7e.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./utils-202ce5b9.js","./BlockLabel-6e86bddb.js","./Empty-1dddf04e.js","./index-0b65e241.css"]:void 0,import.meta.url)
  },
  html: {
    static: () => __vitePreload(() => import('./index-fcb884e5.js'),true?["./index-fcb884e5.js","./index-30423ace.js","./index-7d858894.css","./Button-153ea7e7.js","./Button-d1784ebc.css","./index-6e79a796.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-c165dd31.js'),true?["./index-c165dd31.js","./index-1539bacb.css"]:void 0,import.meta.url)
  },
  image: {
    static: () => __vitePreload(() => import('./index-03e7a9f2.js'),true?["./index-03e7a9f2.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockLabel-6e86bddb.js","./IconButton-a7cec4e3.js","./Empty-1dddf04e.js","./ShareButton-67809009.js","./Download-4ba7429d.js","./Image-3675b397.js","./utils-fe21d2ec.js","./index-19d937dd.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-534eea75.js'),true?["./index-534eea75.js","./InteractiveImage-76ed3311.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockLabel-6e86bddb.js","./Image-3675b397.js","./utils-fe21d2ec.js","./IconButton-a7cec4e3.js","./ModifyUpload-aa8b58d9.js","./Undo-863e44da.js","./Upload-3fd97bb0.js","./UploadText-5bbd5d92.js","./InteractiveImage-f4b9931a.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-04a3bb38.js'),true?["./index-04a3bb38.js","./index-0d5dc963.css"]:void 0,import.meta.url)
  },
  interpretation: {
    static: () => __vitePreload(() => import('./index-105d295e.js'),true?["./index-105d295e.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./index-ce16718c.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-105d295e.js'),true?["./index-105d295e.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./index-ce16718c.css"]:void 0,import.meta.url)
  },
  json: {
    static: () => __vitePreload(() => import('./index-9d739481.js'),true?["./index-9d739481.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./Copy-51753e2b.js","./Empty-1dddf04e.js","./BlockLabel-6e86bddb.js","./index-25282f5a.css"]:void 0,import.meta.url)
  },
  label: {
    static: () => __vitePreload(() => import('./index-9f6a2a72.js'),true?["./index-9f6a2a72.js","./index-30423ace.js","./index-7d858894.css","./Button-153ea7e7.js","./Button-d1784ebc.css","./BlockLabel-6e86bddb.js","./Empty-1dddf04e.js","./index-0d4ea94f.css"]:void 0,import.meta.url)
  },
  markdown: {
    static: () => __vitePreload(() => import('./index-bca5c844.js'),true?["./index-bca5c844.js","./StaticMarkdown-08860037.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./StaticMarkdown-28ef77f1.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-9307351f.js'),true?["./index-9307351f.js","./index-adb81b0a.css"]:void 0,import.meta.url)
  },
  model3d: {
    static: () => __vitePreload(() => import('./index-6a761e4f.js'),true?["./index-6a761e4f.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockLabel-6e86bddb.js","./Empty-1dddf04e.js","./File-42c5d0dc.js","./IconButton-a7cec4e3.js","./Download-4ba7429d.js","./Undo-863e44da.js","./babylonjs.loaders.min-f2b15715.js","./index-c56347c4.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-1696cb3a.js'),true?["./index-1696cb3a.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./UploadText-5bbd5d92.js","./Upload-3fd97bb0.js","./ModifyUpload-aa8b58d9.js","./IconButton-a7cec4e3.js","./Undo-863e44da.js","./BlockLabel-6e86bddb.js","./File-42c5d0dc.js","./babylonjs.loaders.min-f2b15715.js","./index-5acfbc7c.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-124853ca.js'),true?["./index-124853ca.js","./index-046eeb93.css"]:void 0,import.meta.url)
  },
  number: {
    static: () => __vitePreload(() => import('./index-b38c9387.js'),true?["./index-b38c9387.js","./Number-5d8ac828.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./Number-a0aee649.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-9c8f07b1.js'),true?["./index-9c8f07b1.js","./Number-5d8ac828.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./Number-a0aee649.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-9da7c494.js'),true?["./index-9da7c494.js","./index-06359a48.css"]:void 0,import.meta.url)
  },
  plot: {
    static: () => __vitePreload(() => import('./index-19536500.js'),true?["./index-19536500.js","./index-30423ace.js","./index-7d858894.css","./Button-153ea7e7.js","./Button-d1784ebc.css","./color-6013ae7e.js","./dsv-a37bb3db.js","./Empty-1dddf04e.js","./BlockLabel-6e86bddb.js","./index-2af31b9a.css"]:void 0,import.meta.url)
  },
  radio: {
    static: () => __vitePreload(() => import('./index-5c6af59f.js'),true?["./index-5c6af59f.js","./Radio-12ffbc59.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./Radio-da99136d.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-c15a82ec.js'),true?["./index-c15a82ec.js","./Radio-12ffbc59.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./Radio-da99136d.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-ad34c953.js'),true?["./index-ad34c953.js","./index-8b6b835e.css"]:void 0,import.meta.url)
  },
  row: {
    static: () => __vitePreload(() => import('./index-ba982d90.js'),true?["./index-ba982d90.js","./index-d235ae0b.css"]:void 0,import.meta.url)
  },
  slider: {
    static: () => __vitePreload(() => import('./index-81b889d5.js'),true?["./index-81b889d5.js","./Range-9d6c9201.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./Range-c7c7c35d.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-03d511ed.js'),true?["./index-03d511ed.js","./Range-9d6c9201.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./Range-c7c7c35d.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-3c1eacfd.js'),true?["./index-3c1eacfd.js","./index-4a990d06.css"]:void 0,import.meta.url)
  },
  state: {
    static: () => __vitePreload(() => import('./index-15b177c3.js'),true?[]:void 0,import.meta.url)
  },
  statustracker: {
    static: () => __vitePreload(() => import('./index-72be8cb0.js'),true?["./index-72be8cb0.js","./index-30423ace.js","./index-7d858894.css","./Button-153ea7e7.js","./Button-d1784ebc.css"]:void 0,import.meta.url)
  },
  tabs: {
    static: () => __vitePreload(() => import('./index-6acf175c.js'),true?["./index-6acf175c.js","./StaticTabs-7e25a64e.js","./index-30423ace.js","./index-7d858894.css","./StaticTabs-84fdc714.css"]:void 0,import.meta.url)
  },
  tabitem: {
    static: () => __vitePreload(() => import('./index-f1e861f7.js'),true?["./index-f1e861f7.js","./StaticTabs-7e25a64e.js","./index-30423ace.js","./index-7d858894.css","./StaticTabs-84fdc714.css","./index-0cfc7b99.js","./index-6fd2ac73.css","./index-2e1a43f1.css"]:void 0,import.meta.url)
  },
  textbox: {
    static: () => __vitePreload(() => import('./index-e9771dc7.js'),true?["./index-e9771dc7.js","./Textbox-d96ff70c.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./Copy-51753e2b.js","./Textbox-bcb3e022.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-fc770923.js'),true?["./index-fc770923.js","./InteractiveTextbox-a07b20ba.js","./Textbox-d96ff70c.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockTitle-10d6508b.js","./Copy-51753e2b.js","./Textbox-bcb3e022.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-8bdfdb3a.js'),true?["./index-8bdfdb3a.js","./index-f9733161.css"]:void 0,import.meta.url)
  },
  uploadbutton: {
    static: () => __vitePreload(() => import('./index-ebd2a695.js'),true?["./index-ebd2a695.js","./UploadButton-e351c051.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./UploadButton-6df851cf.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-89e54dc5.js'),true?["./index-89e54dc5.js","./UploadButton-e351c051.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./UploadButton-6df851cf.css"]:void 0,import.meta.url)
  },
  video: {
    static: () => __vitePreload(() => import('./index-05d8f4d1.js'),true?["./index-05d8f4d1.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./BlockLabel-6e86bddb.js","./IconButton-a7cec4e3.js","./Empty-1dddf04e.js","./ShareButton-67809009.js","./Download-4ba7429d.js","./Player-09fc65df.js","./Undo-863e44da.js","./Player.svelte_svelte_type_style_lang-6d8e482d.js","./Player-ea61e4f0.css","./index-e8a46bf6.css"]:void 0,import.meta.url),
    interactive: () => __vitePreload(() => import('./index-fff0ecaf.js'),true?["./index-fff0ecaf.js","./Button-153ea7e7.js","./index-30423ace.js","./index-7d858894.css","./Button-d1784ebc.css","./UploadText-5bbd5d92.js","./Upload-3fd97bb0.js","./ModifyUpload-aa8b58d9.js","./IconButton-a7cec4e3.js","./Undo-863e44da.js","./BlockLabel-6e86bddb.js","./Player-09fc65df.js","./Player.svelte_svelte_type_style_lang-6d8e482d.js","./Player-ea61e4f0.css","./InteractiveImage-76ed3311.js","./Image-3675b397.js","./utils-fe21d2ec.js","./InteractiveImage-f4b9931a.css","./index-8ec1fe68.css"]:void 0,import.meta.url),
    example: () => __vitePreload(() => import('./index-fa3ea82a.js'),true?["./index-fa3ea82a.js","./Player.svelte_svelte_type_style_lang-6d8e482d.js","./Player-ea61e4f0.css","./index-30423ace.js","./index-7d858894.css","./index-9fd29bcd.css"]:void 0,import.meta.url)
  }
};
const fallback_component_map = {
  interactive: InteractiveFallback,
  static: StaticFallback,
  example: Fallback
};

function create_loading_status_store() {
  const store = writable({});
  const fn_inputs = [];
  const fn_outputs = [];
  const pending_outputs = /* @__PURE__ */ new Map();
  const pending_inputs = /* @__PURE__ */ new Map();
  const inputs_to_update = /* @__PURE__ */ new Map();
  const fn_status = [];
  function update({
    fn_index,
    status,
    queue = true,
    size,
    position = null,
    eta = null,
    message = null,
    progress
  }) {
    const outputs = fn_outputs[fn_index];
    const inputs = fn_inputs[fn_index];
    const last_status = fn_status[fn_index];
    const outputs_to_update = outputs.map((id) => {
      let new_status;
      const pending_count = pending_outputs.get(id) || 0;
      if (last_status === "pending" && status !== "pending") {
        let new_count = pending_count - 1;
        pending_outputs.set(id, new_count < 0 ? 0 : new_count);
        new_status = new_count > 0 ? "pending" : status;
      } else if (last_status === "pending" && status === "pending") {
        new_status = "pending";
      } else if (last_status !== "pending" && status === "pending") {
        new_status = "pending";
        pending_outputs.set(id, pending_count + 1);
      } else {
        new_status = status;
      }
      return {
        id,
        queue_position: position,
        queue_size: size,
        eta,
        status: new_status,
        message,
        progress
      };
    });
    inputs.forEach((id) => {
      const pending_count = pending_inputs.get(id) || 0;
      if (last_status === "pending" && status !== "pending") {
        let new_count = pending_count - 1;
        pending_inputs.set(id, new_count < 0 ? 0 : new_count);
        inputs_to_update.set(id, status);
      } else if (last_status !== "pending" && status === "pending") {
        pending_inputs.set(id, pending_count + 1);
        inputs_to_update.set(id, status);
      } else {
        inputs_to_update.delete(id);
      }
    });
    store.update((outputs2) => {
      outputs_to_update.forEach(
        ({
          id,
          queue_position,
          queue_size,
          eta: eta2,
          status: status2,
          message: message2,
          progress: progress2
        }) => {
          outputs2[id] = {
            queue,
            queue_size,
            queue_position,
            eta: eta2,
            message: message2,
            progress: progress2,
            status: status2,
            fn_index
          };
        }
      );
      return outputs2;
    });
    fn_status[fn_index] = status;
  }
  function register(index, inputs, outputs) {
    fn_inputs[index] = inputs;
    fn_outputs[index] = outputs;
  }
  return {
    update,
    register,
    subscribe: store.subscribe,
    get_status_for_fn(i) {
      return fn_status[i];
    },
    get_inputs_to_update() {
      return inputs_to_update;
    }
  };
}

/* src/api_docs/img/clear.svelte generated by Svelte v4.0.0 */

const file$9 = "src/api_docs/img/clear.svelte";

function create_fragment$c(ctx) {
	let svg;
	let g;
	let path0;
	let path1;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			g = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr_dev(path0, "d", "M3.789,0.09C3.903,-0.024 4.088,-0.024 4.202,0.09L4.817,0.705C4.931,0.819 4.931,1.004 4.817,1.118L1.118,4.817C1.004,4.931 0.819,4.931 0.705,4.817L0.09,4.202C-0.024,4.088 -0.024,3.903 0.09,3.789L3.789,0.09Z");
			add_location(path0, file$9, 11, 2, 285);
			attr_dev(path1, "d", "M4.825,3.797C4.934,3.907 4.934,4.084 4.825,4.193L4.193,4.825C4.084,4.934 3.907,4.934 3.797,4.825L0.082,1.11C-0.027,1.001 -0.027,0.823 0.082,0.714L0.714,0.082C0.823,-0.027 1.001,-0.027 1.11,0.082L4.825,3.797Z");
			add_location(path1, file$9, 14, 2, 510);
			add_location(g, file$9, 10, 1, 279);
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "viewBox", "0 0 5 5");
			attr_dev(svg, "version", "1.1");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr_dev(svg, "xml:space", "preserve");
			set_style(svg, "fill", "currentColor");
			set_style(svg, "fill-rule", "evenodd");
			set_style(svg, "clip-rule", "evenodd");
			set_style(svg, "stroke-linejoin", "round");
			set_style(svg, "stroke-miterlimit", "2");
			add_location(svg, file$9, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, g);
			append_dev(g, path0);
			append_dev(g, path1);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$c.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$c($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Clear', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Clear> was created with unknown prop '${key}'`);
	});

	return [];
}

class Clear extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Clear",
			options,
			id: create_fragment$c.name
		});
	}
}

const NoApi_svelte_svelte_type_style_lang = '';

/* src/api_docs/NoApi.svelte generated by Svelte v4.0.0 */
const file$8 = "src/api_docs/NoApi.svelte";

function create_fragment$b(ctx) {
	let div;
	let h1;
	let t1;
	let p0;
	let t2;
	let code0;
	let t3;
	let t4;
	let p1;
	let t5;
	let code1;
	let t7;
	let br;
	let t8;
	let a;
	let t10;
	let code2;
	let t12;
	let code3;
	let t14;
	let t15;
	let button;
	let clear;
	let current;
	let mounted;
	let dispose;
	clear = new Clear({ $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			h1 = element("h1");
			h1.textContent = "API Docs";
			t1 = space();
			p0 = element("p");
			t2 = text("No API Routes found for\n\t\t");
			code0 = element("code");
			t3 = text(/*root*/ ctx[0]);
			t4 = space();
			p1 = element("p");
			t5 = text("To expose an API endpoint of your app in this page, set the ");
			code1 = element("code");
			code1.textContent = "api_name";
			t7 = text("\n\t\tparameter of the event listener.\n\t\t");
			br = element("br");
			t8 = text("\n\t\tFor more information, visit the\n\t\t");
			a = element("a");
			a.textContent = "API Page guide";
			t10 = text("\n\t\t. To hide the API documentation button and this page, set\n\t\t");
			code2 = element("code");
			code2.textContent = "show_api=False";
			t12 = text("\n\t\tin the\n\t\t");
			code3 = element("code");
			code3.textContent = "Blocks.launch()";
			t14 = text("\n\t\tmethod.");
			t15 = space();
			button = element("button");
			create_component(clear.$$.fragment);
			add_location(h1, file$8, 10, 1, 202);
			attr_dev(code0, "class", "s-t-YnInjWc0RP");
			add_location(code0, file$8, 13, 2, 271);
			attr_dev(p0, "class", "attention s-t-YnInjWc0RP");
			add_location(p0, file$8, 11, 1, 221);
			add_location(code1, file$8, 18, 62, 371);
			add_location(br, file$8, 22, 2, 437);
			attr_dev(a, "href", "https://gradio.app/sharing_your_app/#api-page");
			attr_dev(a, "target", "_blank");
			add_location(a, file$8, 24, 2, 480);
			add_location(code2, file$8, 28, 2, 640);
			add_location(code3, file$8, 30, 2, 679);
			add_location(p1, file$8, 17, 1, 305);
			attr_dev(div, "class", "wrap prose s-t-YnInjWc0RP");
			add_location(div, file$8, 9, 0, 176);
			attr_dev(button, "class", "s-t-YnInjWc0RP");
			add_location(button, file$8, 35, 0, 732);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h1);
			append_dev(div, t1);
			append_dev(div, p0);
			append_dev(p0, t2);
			append_dev(p0, code0);
			append_dev(code0, t3);
			append_dev(div, t4);
			append_dev(div, p1);
			append_dev(p1, t5);
			append_dev(p1, code1);
			append_dev(p1, t7);
			append_dev(p1, br);
			append_dev(p1, t8);
			append_dev(p1, a);
			append_dev(p1, t10);
			append_dev(p1, code2);
			append_dev(p1, t12);
			append_dev(p1, code3);
			append_dev(p1, t14);
			insert_dev(target, t15, anchor);
			insert_dev(target, button, anchor);
			mount_component(clear, button, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[2], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*root*/ 1) set_data_dev(t3, /*root*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(clear.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(clear.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
				detach_dev(t15);
				detach_dev(button);
			}

			destroy_component(clear);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$b.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$b($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('NoApi', slots, []);
	const dispatch = createEventDispatcher();
	let { root } = $$props;

	$$self.$$.on_mount.push(function () {
		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<NoApi> was created without expected prop 'root'");
		}
	});

	const writable_props = ['root'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NoApi> was created with unknown prop '${key}'`);
	});

	const click_handler = () => dispatch("close");

	$$self.$$set = $$props => {
		if ('root' in $$props) $$invalidate(0, root = $$props.root);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		Clear,
		dispatch,
		root
	});

	$$self.$inject_state = $$props => {
		if ('root' in $$props) $$invalidate(0, root = $$props.root);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [root, dispatch, click_handler];
}

class NoApi extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$b, create_fragment$b, safe_not_equal, { root: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "NoApi",
			options,
			id: create_fragment$b.name
		});
	}

	get root() {
		throw new Error("<NoApi>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<NoApi>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

function represent_value(value, type, lang = null) {
  if (type === void 0) {
    return lang === "py" ? "None" : null;
  }
  if (type === "string" || type === "str") {
    return lang === null ? value : '"' + value + '"';
  } else if (type === "number") {
    return lang === null ? parseFloat(value) : value;
  } else if (type === "boolean" || type == "bool") {
    if (lang === "py") {
      value = String(value);
      return value === "true" ? "True" : "False";
    } else if (lang === "js") {
      return value;
    }
    return value === "true";
  } else if (type === "List[str]") {
    value = JSON.stringify(value);
    return value;
  }
  if (lang === null) {
    return value === "" ? null : JSON.parse(value);
  } else if (typeof value === "string") {
    if (value === "") {
      return lang === "py" ? "None" : "null";
    }
    return value;
  }
  return JSON.stringify(value);
}

const api_logo = ""+new URL('api-logo-5346f193.svg', import.meta.url).href+"";

const ApiBanner_svelte_svelte_type_style_lang = '';

/* src/api_docs/ApiBanner.svelte generated by Svelte v4.0.0 */
const file$7 = "src/api_docs/ApiBanner.svelte";

// (18:51) {#if api_count > 1}
function create_if_block$7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("s");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$7.name,
		type: "if",
		source: "(18:51) {#if api_count > 1}",
		ctx
	});

	return block;
}

function create_fragment$a(ctx) {
	let h2;
	let img;
	let img_src_value;
	let t0;
	let div1;
	let t1;
	let div0;
	let t2;
	let t3;
	let span1;
	let span0;
	let t4;
	let t5;
	let t6;
	let button;
	let clear;
	let current;
	let mounted;
	let dispose;
	let if_block = /*api_count*/ ctx[1] > 1 && create_if_block$7(ctx);
	clear = new Clear({ $$inline: true });

	const block = {
		c: function create() {
			h2 = element("h2");
			img = element("img");
			t0 = space();
			div1 = element("div");
			t1 = text("API documentation\n\t\t");
			div0 = element("div");
			t2 = text(/*root*/ ctx[0]);
			t3 = space();
			span1 = element("span");
			span0 = element("span");
			t4 = text(/*api_count*/ ctx[1]);
			t5 = text(" API endpoint");
			if (if_block) if_block.c();
			t6 = space();
			button = element("button");
			create_component(clear.$$.fragment);
			if (!src_url_equal(img.src, img_src_value = api_logo)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "s-yJfDZ-qZR8M_");
			add_location(img, file$7, 12, 1, 247);
			attr_dev(div0, "class", "url s-yJfDZ-qZR8M_");
			add_location(div0, file$7, 15, 2, 306);
			add_location(div1, file$7, 13, 1, 278);
			attr_dev(span0, "class", "url s-yJfDZ-qZR8M_");
			add_location(span0, file$7, 20, 2, 376);
			attr_dev(span1, "class", "counts s-yJfDZ-qZR8M_");
			add_location(span1, file$7, 19, 1, 352);
			attr_dev(h2, "class", "s-yJfDZ-qZR8M_");
			add_location(h2, file$7, 11, 0, 241);
			attr_dev(button, "class", "s-yJfDZ-qZR8M_");
			add_location(button, file$7, 24, 0, 467);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, img);
			append_dev(h2, t0);
			append_dev(h2, div1);
			append_dev(div1, t1);
			append_dev(div1, div0);
			append_dev(div0, t2);
			append_dev(h2, t3);
			append_dev(h2, span1);
			append_dev(span1, span0);
			append_dev(span0, t4);
			append_dev(span1, t5);
			if (if_block) if_block.m(span1, null);
			insert_dev(target, t6, anchor);
			insert_dev(target, button, anchor);
			mount_component(clear, button, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[3], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*root*/ 1) set_data_dev(t2, /*root*/ ctx[0]);
			if (!current || dirty & /*api_count*/ 2) set_data_dev(t4, /*api_count*/ ctx[1]);

			if (/*api_count*/ ctx[1] > 1) {
				if (if_block) ; else {
					if_block = create_if_block$7(ctx);
					if_block.c();
					if_block.m(span1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(clear.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(clear.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(h2);
				detach_dev(t6);
				detach_dev(button);
			}

			if (if_block) if_block.d();
			destroy_component(clear);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$a.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$a($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ApiBanner', slots, []);
	let { root } = $$props;
	let { api_count } = $$props;
	const dispatch = createEventDispatcher();

	$$self.$$.on_mount.push(function () {
		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<ApiBanner> was created without expected prop 'root'");
		}

		if (api_count === undefined && !('api_count' in $$props || $$self.$$.bound[$$self.$$.props['api_count']])) {
			console.warn("<ApiBanner> was created without expected prop 'api_count'");
		}
	});

	const writable_props = ['root', 'api_count'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ApiBanner> was created with unknown prop '${key}'`);
	});

	const click_handler = () => dispatch("close");

	$$self.$$set = $$props => {
		if ('root' in $$props) $$invalidate(0, root = $$props.root);
		if ('api_count' in $$props) $$invalidate(1, api_count = $$props.api_count);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		api_logo,
		Clear,
		root,
		api_count,
		dispatch
	});

	$$self.$inject_state = $$props => {
		if ('root' in $$props) $$invalidate(0, root = $$props.root);
		if ('api_count' in $$props) $$invalidate(1, api_count = $$props.api_count);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [root, api_count, dispatch, click_handler];
}

class ApiBanner extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$a, create_fragment$a, safe_not_equal, { root: 0, api_count: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ApiBanner",
			options,
			id: create_fragment$a.name
		});
	}

	get root() {
		throw new Error("<ApiBanner>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<ApiBanner>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get api_count() {
		throw new Error("<ApiBanner>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set api_count(value) {
		throw new Error("<ApiBanner>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const ResponseObject_svelte_svelte_type_style_lang = '';

/* src/api_docs/ResponseObject.svelte generated by Svelte v4.0.0 */
const file$6 = "src/api_docs/ResponseObject.svelte";

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i].label;
	child_ctx[5] = list[i].type;
	child_ctx[6] = list[i].python_type;
	child_ctx[7] = list[i].component;
	child_ctx[8] = list[i].serializer;
	child_ctx[10] = i;
	return child_ctx;
}

// (18:3) {#if endpoint_returns.length > 1}
function create_if_block_4$3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("(");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$3.name,
		type: "if",
		source: "(18:3) {#if endpoint_returns.length > 1}",
		ctx
	});

	return block;
}

// (23:64) {:else}
function create_else_block$3(ctx) {
	let t_value = /*js_returns*/ ctx[2][/*i*/ ctx[10]].type + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*js_returns*/ 4 && t_value !== (t_value = /*js_returns*/ ctx[2][/*i*/ ctx[10]].type + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$3.name,
		type: "else",
		source: "(23:64) {:else}",
		ctx
	});

	return block;
}

// (23:11) {#if current_language === "python"}
function create_if_block_3$3(ctx) {
	let t_value = /*python_type*/ ctx[6].type + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*endpoint_returns*/ 2 && t_value !== (t_value = /*python_type*/ ctx[6].type + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$3.name,
		type: "if",
		source: "(23:11) {#if current_language === \\\"python\\\"}",
		ctx
	});

	return block;
}

// (31:6) {#if endpoint_returns.length > 1}
function create_if_block_2$3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(",");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$3.name,
		type: "if",
		source: "(31:6) {#if endpoint_returns.length > 1}",
		ctx
	});

	return block;
}

// (19:3) {#each endpoint_returns as { label, type, python_type, component, serializer }
function create_each_block$3(ctx) {
	let div;
	let span;
	let t0;
	let t1;
	let t2_value = /*label*/ ctx[4] + "";
	let t2;
	let t3;
	let t4_value = /*component*/ ctx[7] + "";
	let t4;
	let t5;

	function select_block_type(ctx, dirty) {
		if (/*current_language*/ ctx[3] === "python") return create_if_block_3$3;
		return create_else_block$3;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*endpoint_returns*/ ctx[1].length > 1 && create_if_block_2$3(ctx);

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			t0 = text("# ");
			if_block0.c();
			t1 = text("\n\t\t\t\t\t\trepresenting output in '");
			t2 = text(t2_value);
			t3 = text("' ");
			t4 = text(t4_value);
			t5 = text("\n\t\t\t\t\t\tcomponent");
			if (if_block1) if_block1.c();
			attr_dev(span, "class", "desc s-eA1oQpma_gT4");
			add_location(span, file$6, 22, 5, 573);
			attr_dev(div, "class", "s-eA1oQpma_gT4");
			toggle_class(div, "second-level", /*endpoint_returns*/ ctx[1].length > 1);
			add_location(div, file$6, 21, 4, 513);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, span);
			append_dev(span, t0);
			if_block0.m(span, null);
			append_dev(span, t1);
			append_dev(span, t2);
			append_dev(span, t3);
			append_dev(span, t4);
			append_dev(span, t5);
			if (if_block1) if_block1.m(div, null);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(span, t1);
				}
			}

			if (dirty & /*endpoint_returns*/ 2 && t2_value !== (t2_value = /*label*/ ctx[4] + "")) set_data_dev(t2, t2_value);
			if (dirty & /*endpoint_returns*/ 2 && t4_value !== (t4_value = /*component*/ ctx[7] + "")) set_data_dev(t4, t4_value);

			if (/*endpoint_returns*/ ctx[1].length > 1) {
				if (if_block1) ; else {
					if_block1 = create_if_block_2$3(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*endpoint_returns*/ 2) {
				toggle_class(div, "second-level", /*endpoint_returns*/ ctx[1].length > 1);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$3.name,
		type: "each",
		source: "(19:3) {#each endpoint_returns as { label, type, python_type, component, serializer }",
		ctx
	});

	return block;
}

// (34:3) {#if endpoint_returns.length > 1}
function create_if_block_1$4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(")");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$4.name,
		type: "if",
		source: "(34:3) {#if endpoint_returns.length > 1}",
		ctx
	});

	return block;
}

// (36:2) {#if is_running}
function create_if_block$6(ctx) {
	let div;
	let loader;
	let current;
	loader = new Loader({ props: { margin: false }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(loader.$$.fragment);
			attr_dev(div, "class", "load-wrap s-eA1oQpma_gT4");
			add_location(div, file$6, 38, 3, 972);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(loader, div, null);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(loader);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$6.name,
		type: "if",
		source: "(36:2) {#if is_running}",
		ctx
	});

	return block;
}

// (15:0) <Block>
function create_default_slot$5(ctx) {
	let div1;
	let div0;
	let t0;
	let t1;
	let t2;
	let current;
	let if_block0 = /*endpoint_returns*/ ctx[1].length > 1 && create_if_block_4$3(ctx);
	let each_value = ensure_array_like_dev(/*endpoint_returns*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	let if_block1 = /*endpoint_returns*/ ctx[1].length > 1 && create_if_block_1$4(ctx);
	let if_block2 = /*is_running*/ ctx[0] && create_if_block$6(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			attr_dev(div0, "class", "s-eA1oQpma_gT4");
			toggle_class(div0, "hide", /*is_running*/ ctx[0]);
			add_location(div0, file$6, 18, 2, 350);
			attr_dev(div1, "class", "response-wrap s-eA1oQpma_gT4");
			add_location(div1, file$6, 17, 1, 320);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			if (if_block0) if_block0.m(div0, null);
			append_dev(div0, t0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div0, null);
				}
			}

			append_dev(div0, t1);
			if (if_block1) if_block1.m(div0, null);
			append_dev(div1, t2);
			if (if_block2) if_block2.m(div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*endpoint_returns*/ ctx[1].length > 1) {
				if (if_block0) ; else {
					if_block0 = create_if_block_4$3(ctx);
					if_block0.c();
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*endpoint_returns, current_language, js_returns*/ 14) {
				each_value = ensure_array_like_dev(/*endpoint_returns*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, t1);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*endpoint_returns*/ ctx[1].length > 1) {
				if (if_block1) ; else {
					if_block1 = create_if_block_1$4(ctx);
					if_block1.c();
					if_block1.m(div0, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (!current || dirty & /*is_running*/ 1) {
				toggle_class(div0, "hide", /*is_running*/ ctx[0]);
			}

			if (/*is_running*/ ctx[0]) {
				if (if_block2) {
					if (dirty & /*is_running*/ 1) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$6(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div1, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			if (if_block0) if_block0.d();
			destroy_each(each_blocks, detaching);
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$5.name,
		type: "slot",
		source: "(15:0) <Block>",
		ctx
	});

	return block;
}

function create_fragment$9(ctx) {
	let h4;
	let div1;
	let div0;
	let t0;
	let t1;
	let block;
	let current;

	block = new Block({
			props: {
				$$slots: { default: [create_default_slot$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			h4 = element("h4");
			div1 = element("div");
			div0 = element("div");
			t0 = text("\n\tReturn Type(s)");
			t1 = space();
			create_component(block.$$.fragment);
			attr_dev(div0, "class", "toggle-dot s-eA1oQpma_gT4");
			add_location(div0, file$6, 12, 2, 254);
			attr_dev(div1, "class", "toggle-icon s-eA1oQpma_gT4");
			add_location(div1, file$6, 11, 1, 226);
			attr_dev(h4, "class", "s-eA1oQpma_gT4");
			add_location(h4, file$6, 10, 0, 220);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, h4, anchor);
			append_dev(h4, div1);
			append_dev(div1, div0);
			append_dev(h4, t0);
			insert_dev(target, t1, anchor);
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};

			if (dirty & /*$$scope, is_running, endpoint_returns, current_language, js_returns*/ 2063) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(h4);
				detach_dev(t1);
			}

			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment$9.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance$9($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ResponseObject', slots, []);
	let { is_running } = $$props;
	let { endpoint_returns } = $$props;
	let { js_returns } = $$props;
	let { current_language } = $$props;

	$$self.$$.on_mount.push(function () {
		if (is_running === undefined && !('is_running' in $$props || $$self.$$.bound[$$self.$$.props['is_running']])) {
			console.warn("<ResponseObject> was created without expected prop 'is_running'");
		}

		if (endpoint_returns === undefined && !('endpoint_returns' in $$props || $$self.$$.bound[$$self.$$.props['endpoint_returns']])) {
			console.warn("<ResponseObject> was created without expected prop 'endpoint_returns'");
		}

		if (js_returns === undefined && !('js_returns' in $$props || $$self.$$.bound[$$self.$$.props['js_returns']])) {
			console.warn("<ResponseObject> was created without expected prop 'js_returns'");
		}

		if (current_language === undefined && !('current_language' in $$props || $$self.$$.bound[$$self.$$.props['current_language']])) {
			console.warn("<ResponseObject> was created without expected prop 'current_language'");
		}
	});

	const writable_props = ['is_running', 'endpoint_returns', 'js_returns', 'current_language'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ResponseObject> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('is_running' in $$props) $$invalidate(0, is_running = $$props.is_running);
		if ('endpoint_returns' in $$props) $$invalidate(1, endpoint_returns = $$props.endpoint_returns);
		if ('js_returns' in $$props) $$invalidate(2, js_returns = $$props.js_returns);
		if ('current_language' in $$props) $$invalidate(3, current_language = $$props.current_language);
	};

	$$self.$capture_state = () => ({
		Loader,
		Block,
		is_running,
		endpoint_returns,
		js_returns,
		current_language
	});

	$$self.$inject_state = $$props => {
		if ('is_running' in $$props) $$invalidate(0, is_running = $$props.is_running);
		if ('endpoint_returns' in $$props) $$invalidate(1, endpoint_returns = $$props.endpoint_returns);
		if ('js_returns' in $$props) $$invalidate(2, js_returns = $$props.js_returns);
		if ('current_language' in $$props) $$invalidate(3, current_language = $$props.current_language);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [is_running, endpoint_returns, js_returns, current_language];
}

class ResponseObject extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
			is_running: 0,
			endpoint_returns: 1,
			js_returns: 2,
			current_language: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ResponseObject",
			options,
			id: create_fragment$9.name
		});
	}

	get is_running() {
		throw new Error("<ResponseObject>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set is_running(value) {
		throw new Error("<ResponseObject>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get endpoint_returns() {
		throw new Error("<ResponseObject>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set endpoint_returns(value) {
		throw new Error("<ResponseObject>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get js_returns() {
		throw new Error("<ResponseObject>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set js_returns(value) {
		throw new Error("<ResponseObject>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get current_language() {
		throw new Error("<ResponseObject>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set current_language(value) {
		throw new Error("<ResponseObject>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/api_docs/CopyButton.svelte generated by Svelte v4.0.0 */

// (13:0) <BaseButton size="sm" on:click={copy}>
function create_default_slot$4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*copy_text*/ ctx[0]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*copy_text*/ 1) set_data_dev(t, /*copy_text*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$4.name,
		type: "slot",
		source: "(13:0) <BaseButton size=\\\"sm\\\" on:click={copy}>",
		ctx
	});

	return block;
}

function create_fragment$8(ctx) {
	let basebutton;
	let current;

	basebutton = new Button({
			props: {
				size: "sm",
				$$slots: { default: [create_default_slot$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	basebutton.$on("click", /*copy*/ ctx[1]);

	const block = {
		c: function create() {
			create_component(basebutton.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(basebutton, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const basebutton_changes = {};

			if (dirty & /*$$scope, copy_text*/ 9) {
				basebutton_changes.$$scope = { dirty, ctx };
			}

			basebutton.$set(basebutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(basebutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(basebutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(basebutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$8.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$8($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('CopyButton', slots, []);
	let { code } = $$props;
	let copy_text = "copy";

	function copy() {
		navigator.clipboard.writeText(code);
		$$invalidate(0, copy_text = "copied!");

		setTimeout(
			() => {
				$$invalidate(0, copy_text = "copy");
			},
			1500
		);
	}

	$$self.$$.on_mount.push(function () {
		if (code === undefined && !('code' in $$props || $$self.$$.bound[$$self.$$.props['code']])) {
			console.warn("<CopyButton> was created without expected prop 'code'");
		}
	});

	const writable_props = ['code'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CopyButton> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('code' in $$props) $$invalidate(2, code = $$props.code);
	};

	$$self.$capture_state = () => ({ BaseButton: Button, code, copy_text, copy });

	$$self.$inject_state = $$props => {
		if ('code' in $$props) $$invalidate(2, code = $$props.code);
		if ('copy_text' in $$props) $$invalidate(0, copy_text = $$props.copy_text);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [copy_text, copy, code];
}

class CopyButton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$8, create_fragment$8, safe_not_equal, { code: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CopyButton",
			options,
			id: create_fragment$8.name
		});
	}

	get code() {
		throw new Error("<CopyButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set code(value) {
		throw new Error("<CopyButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const InstallSnippet_svelte_svelte_type_style_lang = '';

/* src/api_docs/InstallSnippet.svelte generated by Svelte v4.0.0 */
const file$5 = "src/api_docs/InstallSnippet.svelte";

// (17:46) 
function create_if_block_1$3(ctx) {
	let div0;
	let copybutton;
	let t0;
	let div1;
	let pre;
	let current;

	copybutton = new CopyButton({
			props: { code: /*js_install*/ ctx[2] },
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(copybutton.$$.fragment);
			t0 = space();
			div1 = element("div");
			pre = element("pre");
			pre.textContent = `\$ ${/*js_install*/ ctx[2]}`;
			attr_dev(div0, "class", "copy s-8mNqblqwdVxs");
			add_location(div0, file$5, 20, 3, 455);
			attr_dev(pre, "class", "s-8mNqblqwdVxs");
			add_location(pre, file$5, 24, 4, 534);
			add_location(div1, file$5, 23, 3, 524);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(copybutton, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, pre);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(copybutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(copybutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div0);
				detach_dev(t0);
				detach_dev(div1);
			}

			destroy_component(copybutton);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$3.name,
		type: "if",
		source: "(17:46) ",
		ctx
	});

	return block;
}

// (10:2) {#if current_language === "python"}
function create_if_block$5(ctx) {
	let div0;
	let copybutton;
	let t0;
	let div1;
	let pre;
	let current;

	copybutton = new CopyButton({
			props: { code: /*py_install*/ ctx[1] },
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(copybutton.$$.fragment);
			t0 = space();
			div1 = element("div");
			pre = element("pre");
			pre.textContent = `\$ ${/*py_install*/ ctx[1]}`;
			attr_dev(div0, "class", "copy s-8mNqblqwdVxs");
			add_location(div0, file$5, 13, 3, 290);
			attr_dev(pre, "class", "s-8mNqblqwdVxs");
			add_location(pre, file$5, 17, 4, 369);
			add_location(div1, file$5, 16, 3, 359);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(copybutton, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, pre);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(copybutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(copybutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div0);
				detach_dev(t0);
				detach_dev(div1);
			}

			destroy_component(copybutton);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$5.name,
		type: "if",
		source: "(10:2) {#if current_language === \\\"python\\\"}",
		ctx
	});

	return block;
}

// (8:0) <Block>
function create_default_slot$3(ctx) {
	let code;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block$5, create_if_block_1$3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*current_language*/ ctx[0] === "python") return 0;
		if (/*current_language*/ ctx[0] === "javascript") return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			code = element("code");
			if (if_block) if_block.c();
			attr_dev(code, "class", "s-8mNqblqwdVxs");
			add_location(code, file$5, 11, 1, 242);
		},
		m: function mount(target, anchor) {
			insert_dev(target, code, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(code, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(code, null);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(code);
			}

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(8:0) <Block>",
		ctx
	});

	return block;
}

function create_fragment$7(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				$$slots: { default: [create_default_slot$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};

			if (dirty & /*$$scope, current_language*/ 9) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance$7($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('InstallSnippet', slots, []);
	let { current_language } = $$props;
	let py_install = "pip install gradio_client";
	let js_install = "npm i -D @gradio/client";

	$$self.$$.on_mount.push(function () {
		if (current_language === undefined && !('current_language' in $$props || $$self.$$.bound[$$self.$$.props['current_language']])) {
			console.warn("<InstallSnippet> was created without expected prop 'current_language'");
		}
	});

	const writable_props = ['current_language'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InstallSnippet> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('current_language' in $$props) $$invalidate(0, current_language = $$props.current_language);
	};

	$$self.$capture_state = () => ({
		CopyButton,
		Block,
		current_language,
		py_install,
		js_install
	});

	$$self.$inject_state = $$props => {
		if ('current_language' in $$props) $$invalidate(0, current_language = $$props.current_language);
		if ('py_install' in $$props) $$invalidate(1, py_install = $$props.py_install);
		if ('js_install' in $$props) $$invalidate(2, js_install = $$props.js_install);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [current_language, py_install, js_install];
}

class InstallSnippet extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$7, create_fragment$7, safe_not_equal, { current_language: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "InstallSnippet",
			options,
			id: create_fragment$7.name
		});
	}

	get current_language() {
		throw new Error("<InstallSnippet>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set current_language(value) {
		throw new Error("<InstallSnippet>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const EndpointDetail_svelte_svelte_type_style_lang = '';

/* src/api_docs/EndpointDetail.svelte generated by Svelte v4.0.0 */

const file$4 = "src/api_docs/EndpointDetail.svelte";

// (11:0) {:else}
function create_else_block$2(ctx) {
	let h3;
	let t0;
	let span;
	let t1;

	const block = {
		c: function create() {
			h3 = element("h3");
			t0 = text("fn_index:\n\t\t");
			span = element("span");
			t1 = text(/*fn_index*/ ctx[1]);
			attr_dev(span, "class", "post s-37tH8iHZwq5V");
			add_location(span, file$4, 14, 2, 213);
			attr_dev(h3, "class", "s-37tH8iHZwq5V");
			add_location(h3, file$4, 12, 1, 194);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, t0);
			append_dev(h3, span);
			append_dev(span, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*fn_index*/ 2) set_data_dev(t1, /*fn_index*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(h3);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$2.name,
		type: "else",
		source: "(11:0) {:else}",
		ctx
	});

	return block;
}

// (6:0) {#if named}
function create_if_block$4(ctx) {
	let h3;
	let t0;
	let span;
	let t1_value = "/" + /*api_name*/ ctx[0] + "";
	let t1;

	const block = {
		c: function create() {
			h3 = element("h3");
			t0 = text("api_name:\n\t\t");
			span = element("span");
			t1 = text(t1_value);
			attr_dev(span, "class", "post s-37tH8iHZwq5V");
			add_location(span, file$4, 9, 2, 135);
			attr_dev(h3, "class", "s-37tH8iHZwq5V");
			add_location(h3, file$4, 7, 1, 116);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, t0);
			append_dev(h3, span);
			append_dev(span, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*api_name*/ 1 && t1_value !== (t1_value = "/" + /*api_name*/ ctx[0] + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(h3);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$4.name,
		type: "if",
		source: "(6:0) {#if named}",
		ctx
	});

	return block;
}

function create_fragment$6(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*named*/ ctx[2]) return create_if_block$4;
		return create_else_block$2;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('EndpointDetail', slots, []);
	let { api_name = null } = $$props;
	let { fn_index = null } = $$props;
	let { named } = $$props;

	$$self.$$.on_mount.push(function () {
		if (named === undefined && !('named' in $$props || $$self.$$.bound[$$self.$$.props['named']])) {
			console.warn("<EndpointDetail> was created without expected prop 'named'");
		}
	});

	const writable_props = ['api_name', 'fn_index', 'named'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EndpointDetail> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('api_name' in $$props) $$invalidate(0, api_name = $$props.api_name);
		if ('fn_index' in $$props) $$invalidate(1, fn_index = $$props.fn_index);
		if ('named' in $$props) $$invalidate(2, named = $$props.named);
	};

	$$self.$capture_state = () => ({ api_name, fn_index, named });

	$$self.$inject_state = $$props => {
		if ('api_name' in $$props) $$invalidate(0, api_name = $$props.api_name);
		if ('fn_index' in $$props) $$invalidate(1, fn_index = $$props.fn_index);
		if ('named' in $$props) $$invalidate(2, named = $$props.named);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [api_name, fn_index, named];
}

class EndpointDetail extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$6, safe_not_equal, { api_name: 0, fn_index: 1, named: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "EndpointDetail",
			options,
			id: create_fragment$6.name
		});
	}

	get api_name() {
		throw new Error("<EndpointDetail>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set api_name(value) {
		throw new Error("<EndpointDetail>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fn_index() {
		throw new Error("<EndpointDetail>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fn_index(value) {
		throw new Error("<EndpointDetail>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get named() {
		throw new Error("<EndpointDetail>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set named(value) {
		throw new Error("<EndpointDetail>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const CodeSnippets_svelte_svelte_type_style_lang = '';

/* src/api_docs/CodeSnippets.svelte generated by Svelte v4.0.0 */
const file$3 = "src/api_docs/CodeSnippets.svelte";

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i].label;
	child_ctx[15] = list[i].type;
	child_ctx[16] = list[i].python_type;
	child_ctx[17] = list[i].component;
	child_ctx[18] = list[i].example_input;
	child_ctx[19] = list[i].serializer;
	child_ctx[21] = i;
	return child_ctx;
}

function get_each_context_2$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i].label;
	child_ctx[15] = list[i].type;
	child_ctx[16] = list[i].python_type;
	child_ctx[17] = list[i].component;
	child_ctx[18] = list[i].example_input;
	child_ctx[19] = list[i].serializer;
	child_ctx[21] = i;
	return child_ctx;
}

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i].label;
	child_ctx[15] = list[i].type;
	child_ctx[16] = list[i].python_type;
	child_ctx[17] = list[i].component;
	child_ctx[18] = list[i].example_input;
	child_ctx[19] = list[i].serializer;
	child_ctx[21] = i;
	return child_ctx;
}

// (22:1) {:else}
function create_else_block_3(ctx) {
	let endpointdetail;
	let current;

	endpointdetail = new EndpointDetail({
			props: {
				named: /*named*/ ctx[6],
				fn_index: /*dependency_index*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(endpointdetail.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(endpointdetail, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const endpointdetail_changes = {};
			if (dirty & /*named*/ 64) endpointdetail_changes.named = /*named*/ ctx[6];
			if (dirty & /*dependency_index*/ 2) endpointdetail_changes.fn_index = /*dependency_index*/ ctx[1];
			endpointdetail.$set(endpointdetail_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(endpointdetail.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(endpointdetail.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(endpointdetail, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_3.name,
		type: "else",
		source: "(22:1) {:else}",
		ctx
	});

	return block;
}

// (20:1) {#if named}
function create_if_block_8(ctx) {
	let endpointdetail;
	let current;

	endpointdetail = new EndpointDetail({
			props: {
				named: /*named*/ ctx[6],
				api_name: /*dependency*/ ctx[0].api_name
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(endpointdetail.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(endpointdetail, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const endpointdetail_changes = {};
			if (dirty & /*named*/ 64) endpointdetail_changes.named = /*named*/ ctx[6];
			if (dirty & /*dependency*/ 1) endpointdetail_changes.api_name = /*dependency*/ ctx[0].api_name;
			endpointdetail.$set(endpointdetail_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(endpointdetail.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(endpointdetail.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(endpointdetail, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(20:1) {#if named}",
		ctx
	});

	return block;
}

// (65:47) 
function create_if_block_4$2(ctx) {
	let div0;
	let copybutton;
	let t0;
	let div1;
	let pre;
	let t1;
	let t2;
	let span;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let current;

	copybutton = new CopyButton({
			props: { code: /*js_code*/ ctx[9]?.innerText },
			$$inline: true
		});

	let each_value_2 = ensure_array_like_dev(/*blob_examples*/ ctx[11]);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_1[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
	}

	function select_block_type_3(ctx, dirty) {
		if (/*named*/ ctx[6]) return create_if_block_7;
		return create_else_block_2;
	}

	let current_block_type = select_block_type_3(ctx);
	let if_block = current_block_type(ctx);
	let each_value_1 = ensure_array_like_dev(/*endpoint_parameters*/ ctx[4]);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(copybutton.$$.fragment);
			t0 = space();
			div1 = element("div");
			pre = element("pre");
			t1 = text("import { client } from \"@gradio/client\";\n");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t2 = text("\nconst app = await client(");
			span = element("span");
			t3 = text("\"");
			t4 = text(/*root*/ ctx[2]);
			t5 = text("\"");
			t6 = text(");\nconst result = await app.predict(");
			if_block.c();
			t7 = text(", [");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t8 = text("\n\t]);\n\nconsole.log(result.data);\n");
			attr_dev(div0, "class", "copy s-PsMbAXHVBcLK");
			add_location(div0, file$3, 83, 4, 1921);
			attr_dev(span, "class", "token string s-PsMbAXHVBcLK");
			add_location(span, file$3, 94, 25, 2349);
			attr_dev(pre, "class", "s-PsMbAXHVBcLK");
			add_location(pre, file$3, 87, 5, 2032);
			add_location(div1, file$3, 86, 4, 2001);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(copybutton, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, pre);
			append_dev(pre, t1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				if (each_blocks_1[i]) {
					each_blocks_1[i].m(pre, null);
				}
			}

			append_dev(pre, t2);
			append_dev(pre, span);
			append_dev(span, t3);
			append_dev(span, t4);
			append_dev(span, t5);
			append_dev(pre, t6);
			if_block.m(pre, null);
			append_dev(pre, t7);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(pre, null);
				}
			}

			append_dev(pre, t8);
			/*div1_binding_1*/ ctx[13](div1);
			current = true;
		},
		p: function update(ctx, dirty) {
			const copybutton_changes = {};
			if (dirty & /*js_code*/ 512) copybutton_changes.code = /*js_code*/ ctx[9]?.innerText;
			copybutton.$set(copybutton_changes);

			if (dirty & /*blob_examples*/ 2048) {
				each_value_2 = ensure_array_like_dev(/*blob_examples*/ ctx[11]);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_2$1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(pre, t2);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_2.length;
			}

			if (!current || dirty & /*root*/ 4) set_data_dev(t4, /*root*/ ctx[2]);

			if (current_block_type === (current_block_type = select_block_type_3(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(pre, t7);
				}
			}

			if (dirty & /*endpoint_parameters, blob_components, js_parameters, represent_value*/ 1072) {
				each_value_1 = ensure_array_like_dev(/*endpoint_parameters*/ ctx[4]);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(pre, t8);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(copybutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(copybutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div0);
				detach_dev(t0);
				detach_dev(div1);
			}

			destroy_component(copybutton);
			destroy_each(each_blocks_1, detaching);
			if_block.d();
			destroy_each(each_blocks, detaching);
			/*div1_binding_1*/ ctx[13](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$2.name,
		type: "if",
		source: "(65:47) ",
		ctx
	});

	return block;
}

// (27:3) {#if current_language === "python"}
function create_if_block$3(ctx) {
	let div0;
	let copybutton;
	let t0;
	let div1;
	let pre;
	let t1;
	let span;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let current;

	copybutton = new CopyButton({
			props: { code: /*python_code*/ ctx[8]?.innerText },
			$$inline: true
		});

	let each_value = ensure_array_like_dev(/*endpoint_parameters*/ ctx[4]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	function select_block_type_2(ctx, dirty) {
		if (/*named*/ ctx[6]) return create_if_block_1$2;
		return create_else_block$1;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(copybutton.$$.fragment);
			t0 = space();
			div1 = element("div");
			pre = element("pre");
			t1 = text("from gradio_client import Client\n\nclient = Client(");
			span = element("span");
			t2 = text("\"");
			t3 = text(/*root*/ ctx[2]);
			t4 = text("\"");
			t5 = text(")\nresult = client.predict(");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t6 = text("\n\t\t\t\t");
			if_block.c();
			t7 = text("\n)\nprint(result)");
			attr_dev(div0, "class", "copy s-PsMbAXHVBcLK");
			add_location(div0, file$3, 45, 4, 839);
			attr_dev(span, "class", "token string s-PsMbAXHVBcLK");
			add_location(span, file$3, 51, 16, 1013);
			attr_dev(pre, "class", "s-PsMbAXHVBcLK");
			add_location(pre, file$3, 49, 5, 958);
			add_location(div1, file$3, 48, 4, 923);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(copybutton, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, pre);
			append_dev(pre, t1);
			append_dev(pre, span);
			append_dev(span, t2);
			append_dev(span, t3);
			append_dev(span, t4);
			append_dev(pre, t5);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(pre, null);
				}
			}

			append_dev(pre, t6);
			if_block.m(pre, null);
			append_dev(pre, t7);
			/*div1_binding*/ ctx[12](div1);
			current = true;
		},
		p: function update(ctx, dirty) {
			const copybutton_changes = {};
			if (dirty & /*python_code*/ 256) copybutton_changes.code = /*python_code*/ ctx[8]?.innerText;
			copybutton.$set(copybutton_changes);
			if (!current || dirty & /*root*/ 4) set_data_dev(t3, /*root*/ ctx[2]);

			if (dirty & /*endpoint_parameters, dependency_failures, dependency_index, represent_value*/ 26) {
				each_value = ensure_array_like_dev(/*endpoint_parameters*/ ctx[4]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(pre, t6);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(pre, t7);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(copybutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(copybutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div0);
				detach_dev(t0);
				detach_dev(div1);
			}

			destroy_component(copybutton);
			destroy_each(each_blocks, detaching);
			if_block.d();
			/*div1_binding*/ ctx[12](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(27:3) {#if current_language === \\\"python\\\"}",
		ctx
	});

	return block;
}

// (71:0) {#each blob_examples as { label, type, python_type, component, example_input, serializer }
function create_each_block_2$1(ctx) {
	let t0;
	let t1;
	let t2;
	let t3_value = /*example_input*/ ctx[18] + "";
	let t3;
	let t4;
	let t5_value = /*component*/ ctx[17] + "";
	let t5;
	let t6;
	let t7;
	let t8;

	const block = {
		c: function create() {
			t0 = text("\nconst response_");
			t1 = text(/*i*/ ctx[21]);
			t2 = text(" = await fetch(\"");
			t3 = text(t3_value);
			t4 = text("\");\nconst example");
			t5 = text(t5_value);
			t6 = text(" = await response_");
			t7 = text(/*i*/ ctx[21]);
			t8 = text(".blob();\n\t\t\t\t\t\t");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, t4, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, t6, anchor);
			insert_dev(target, t7, anchor);
			insert_dev(target, t8, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
				detach_dev(t2);
				detach_dev(t3);
				detach_dev(t4);
				detach_dev(t5);
				detach_dev(t6);
				detach_dev(t7);
				detach_dev(t8);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2$1.name,
		type: "each",
		source: "(71:0) {#each blob_examples as { label, type, python_type, component, example_input, serializer }",
		ctx
	});

	return block;
}

// (78:68) {:else}
function create_else_block_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*dependency_index*/ ctx[1]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*dependency_index*/ 2) set_data_dev(t, /*dependency_index*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(78:68) {:else}",
		ctx
	});

	return block;
}

// (78:33) {#if named}
function create_if_block_7(ctx) {
	let t0;
	let t1_value = /*dependency*/ ctx[0].api_name + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			t0 = text("\"/");
			t1 = text(t1_value);
			t2 = text("\"");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*dependency*/ 1 && t1_value !== (t1_value = /*dependency*/ ctx[0].api_name + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
				detach_dev(t2);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(78:33) {#if named}",
		ctx
	});

	return block;
}

// (92:5) {:else}
function create_else_block_1(ctx) {
	let t0;
	let span0;
	let t1_value = represent_value(/*example_input*/ ctx[18], /*python_type*/ ctx[16].type, "js") + "";
	let t1;
	let t2;
	let span1;
	let t3;
	let t4_value = /*js_parameters*/ ctx[5][/*i*/ ctx[21]].type + "";
	let t4;
	let t5;
	let t6;
	let t7_value = /*label*/ ctx[14] + "";
	let t7;
	let t8;
	let t9_value = /*component*/ ctx[17] + "";
	let t9;
	let t10;
	let if_block = /*js_parameters*/ ctx[5][/*i*/ ctx[21]].description && create_if_block_6$1(ctx);

	const block = {
		c: function create() {
			t0 = text("\t\t\n\t\t\t\t");
			span0 = element("span");
			t1 = text(t1_value);
			t2 = text(", ");
			span1 = element("span");
			t3 = text("// ");
			t4 = text(t4_value);
			t5 = text(" ");
			if (if_block) if_block.c();
			t6 = text(" in '");
			t7 = text(t7_value);
			t8 = text("' ");
			t9 = text(t9_value);
			t10 = text(" component");
			attr_dev(span0, "class", "example-inputs s-PsMbAXHVBcLK");
			add_location(span0, file$3, 111, 4, 2913);
			attr_dev(span1, "class", "desc s-PsMbAXHVBcLK");
			add_location(span1, file$3, 118, 3, 3075);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, span0, anchor);
			append_dev(span0, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, span1, anchor);
			append_dev(span1, t3);
			append_dev(span1, t4);
			append_dev(span1, t5);
			if (if_block) if_block.m(span1, null);
			append_dev(span1, t6);
			append_dev(span1, t7);
			append_dev(span1, t8);
			append_dev(span1, t9);
			append_dev(span1, t10);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*endpoint_parameters*/ 16 && t1_value !== (t1_value = represent_value(/*example_input*/ ctx[18], /*python_type*/ ctx[16].type, "js") + "")) set_data_dev(t1, t1_value);
			if (dirty & /*js_parameters*/ 32 && t4_value !== (t4_value = /*js_parameters*/ ctx[5][/*i*/ ctx[21]].type + "")) set_data_dev(t4, t4_value);

			if (/*js_parameters*/ ctx[5][/*i*/ ctx[21]].description) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_6$1(ctx);
					if_block.c();
					if_block.m(span1, t6);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*endpoint_parameters*/ 16 && t7_value !== (t7_value = /*label*/ ctx[14] + "")) set_data_dev(t7, t7_value);
			if (dirty & /*endpoint_parameters*/ 16 && t9_value !== (t9_value = /*component*/ ctx[17] + "")) set_data_dev(t9, t9_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(span0);
				detach_dev(t2);
				detach_dev(span1);
			}

			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(92:5) {:else}",
		ctx
	});

	return block;
}

// (80:5) {#if blob_components.includes(component)}
function create_if_block_5$2(ctx) {
	let t0;
	let span0;
	let t1;
	let t2_value = /*component*/ ctx[17] + "";
	let t2;
	let t3;
	let span1;
	let t4;
	let t5_value = /*label*/ ctx[14] + "";
	let t5;
	let t6;
	let t7_value = /*component*/ ctx[17] + "";
	let t7;
	let t8;

	const block = {
		c: function create() {
			t0 = text("\n\t\t\t\t");
			span0 = element("span");
			t1 = text("example");
			t2 = text(t2_value);
			t3 = text(", ");
			span1 = element("span");
			t4 = text("\t// blob in '");
			t5 = text(t5_value);
			t6 = text("' ");
			t7 = text(t7_value);
			t8 = text(" component");
			attr_dev(span0, "class", "example-inputs s-PsMbAXHVBcLK");
			add_location(span0, file$3, 99, 4, 2668);
			attr_dev(span1, "class", "desc s-PsMbAXHVBcLK");
			add_location(span1, file$3, 102, 5, 2752);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, span0, anchor);
			append_dev(span0, t1);
			append_dev(span0, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, span1, anchor);
			append_dev(span1, t4);
			append_dev(span1, t5);
			append_dev(span1, t6);
			append_dev(span1, t7);
			append_dev(span1, t8);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*endpoint_parameters*/ 16 && t2_value !== (t2_value = /*component*/ ctx[17] + "")) set_data_dev(t2, t2_value);
			if (dirty & /*endpoint_parameters*/ 16 && t5_value !== (t5_value = /*label*/ ctx[14] + "")) set_data_dev(t5, t5_value);
			if (dirty & /*endpoint_parameters*/ 16 && t7_value !== (t7_value = /*component*/ ctx[17] + "")) set_data_dev(t7, t7_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(span0);
				detach_dev(t3);
				detach_dev(span1);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5$2.name,
		type: "if",
		source: "(80:5) {#if blob_components.includes(component)}",
		ctx
	});

	return block;
}

// (104:17) {#if js_parameters[i].description}
function create_if_block_6$1(ctx) {
	let t0;
	let t1_value = /*js_parameters*/ ctx[5][/*i*/ ctx[21]].description + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			t0 = text("(");
			t1 = text(t1_value);
			t2 = text(")");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*js_parameters*/ 32 && t1_value !== (t1_value = /*js_parameters*/ ctx[5][/*i*/ ctx[21]].description + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
				detach_dev(t2);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6$1.name,
		type: "if",
		source: "(104:17) {#if js_parameters[i].description}",
		ctx
	});

	return block;
}

// (79:3) {#each endpoint_parameters as { label, type, python_type, component, example_input, serializer }
function create_each_block_1$1(ctx) {
	let show_if;
	let if_block_anchor;

	function select_block_type_4(ctx, dirty) {
		if (dirty & /*endpoint_parameters*/ 16) show_if = null;
		if (show_if == null) show_if = !!/*blob_components*/ ctx[10].includes(/*component*/ ctx[17]);
		if (show_if) return create_if_block_5$2;
		return create_else_block_1;
	}

	let current_block_type = select_block_type_4(ctx, -1);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_4(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1$1.name,
		type: "each",
		source: "(79:3) {#each endpoint_parameters as { label, type, python_type, component, example_input, serializer }",
		ctx
	});

	return block;
}

// (42:6) {#if dependency_failures[dependency_index][i]}
function create_if_block_3$2(ctx) {
	let span;

	const block = {
		c: function create() {
			span = element("span");
			span.textContent = "ERROR";
			attr_dev(span, "class", "error s-PsMbAXHVBcLK");
			add_location(span, file$3, 60, 6, 1396);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$2.name,
		type: "if",
		source: "(42:6) {#if dependency_failures[dependency_index][i]}",
		ctx
	});

	return block;
}

// (49:28) {#if python_type.description}
function create_if_block_2$2(ctx) {
	let t0;
	let t1_value = /*python_type*/ ctx[16].description + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			t0 = text("(");
			t1 = text(t1_value);
			t2 = text(")\n\t\t\t\t\t\t\t\t");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*endpoint_parameters*/ 16 && t1_value !== (t1_value = /*python_type*/ ctx[16].description + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
				detach_dev(t2);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$2.name,
		type: "if",
		source: "(49:28) {#if python_type.description}",
		ctx
	});

	return block;
}

// (36:3) {#each endpoint_parameters as { label, type, python_type, component, example_input, serializer }
function create_each_block$2(ctx) {
	let t0;
	let span0;
	let t1_value = represent_value(/*example_input*/ ctx[18], /*python_type*/ ctx[16].type, "py") + "";
	let t1;
	let t2;
	let span1;
	let t3;
	let t4_value = /*python_type*/ ctx[16].type + "";
	let t4;
	let t5;
	let t6;
	let t7_value = /*label*/ ctx[14] + "";
	let t7;
	let t8;
	let t9_value = /*component*/ ctx[17] + "";
	let t9;
	let t10;
	let if_block0 = /*dependency_failures*/ ctx[3][/*dependency_index*/ ctx[1]][/*i*/ ctx[21]] && create_if_block_3$2(ctx);
	let if_block1 = /*python_type*/ ctx[16].description && create_if_block_2$2(ctx);

	const block = {
		c: function create() {
			t0 = text("\n\t\t\t\t");
			span0 = element("span");
			t1 = text(t1_value);
			t2 = text(",");
			if (if_block0) if_block0.c();
			span1 = element("span");
			t3 = text("\t# ");
			t4 = text(t4_value);
			t5 = text(" ");
			if (if_block1) if_block1.c();
			t6 = text("in '");
			t7 = text(t7_value);
			t8 = text("' ");
			t9 = text(t9_value);
			t10 = text(" component");
			attr_dev(span0, "class", "example-inputs s-PsMbAXHVBcLK");
			add_location(span0, file$3, 55, 4, 1210);
			attr_dev(span1, "class", "desc s-PsMbAXHVBcLK");
			add_location(span1, file$3, 64, 6, 1474);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, span0, anchor);
			append_dev(span0, t1);
			insert_dev(target, t2, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, span1, anchor);
			append_dev(span1, t3);
			append_dev(span1, t4);
			append_dev(span1, t5);
			if (if_block1) if_block1.m(span1, null);
			append_dev(span1, t6);
			append_dev(span1, t7);
			append_dev(span1, t8);
			append_dev(span1, t9);
			append_dev(span1, t10);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*endpoint_parameters*/ 16 && t1_value !== (t1_value = represent_value(/*example_input*/ ctx[18], /*python_type*/ ctx[16].type, "py") + "")) set_data_dev(t1, t1_value);

			if (/*dependency_failures*/ ctx[3][/*dependency_index*/ ctx[1]][/*i*/ ctx[21]]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_3$2(ctx);
					if_block0.c();
					if_block0.m(span1.parentNode, span1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*endpoint_parameters*/ 16 && t4_value !== (t4_value = /*python_type*/ ctx[16].type + "")) set_data_dev(t4, t4_value);

			if (/*python_type*/ ctx[16].description) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2$2(ctx);
					if_block1.c();
					if_block1.m(span1, t6);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*endpoint_parameters*/ 16 && t7_value !== (t7_value = /*label*/ ctx[14] + "")) set_data_dev(t7, t7_value);
			if (dirty & /*endpoint_parameters*/ 16 && t9_value !== (t9_value = /*component*/ ctx[17] + "")) set_data_dev(t9, t9_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(span0);
				detach_dev(t2);
				detach_dev(span1);
			}

			if (if_block0) if_block0.d(detaching);
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(36:3) {#each endpoint_parameters as { label, type, python_type, component, example_input, serializer }",
		ctx
	});

	return block;
}

// (59:6) {:else}
function create_else_block$1(ctx) {
	let t0;
	let t1;

	const block = {
		c: function create() {
			t0 = text("fn_index=");
			t1 = text(/*dependency_index*/ ctx[1]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*dependency_index*/ 2) set_data_dev(t1, /*dependency_index*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(59:6) {:else}",
		ctx
	});

	return block;
}

// (57:4) {#if named}
function create_if_block_1$2(ctx) {
	let t0;
	let t1_value = /*dependency*/ ctx[0].api_name + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			t0 = text("api_name=\"/");
			t1 = text(t1_value);
			t2 = text("\"");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*dependency*/ 1 && t1_value !== (t1_value = /*dependency*/ ctx[0].api_name + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
				detach_dev(t2);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$2.name,
		type: "if",
		source: "(57:4) {#if named}",
		ctx
	});

	return block;
}

// (25:1) <Block>
function create_default_slot$2(ctx) {
	let code;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block$3, create_if_block_4$2];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*current_language*/ ctx[7] === "python") return 0;
		if (/*current_language*/ ctx[7] === "javascript") return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_1(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			code = element("code");
			if (if_block) if_block.c();
			attr_dev(code, "class", "s-PsMbAXHVBcLK");
			add_location(code, file$3, 43, 2, 789);
		},
		m: function mount(target, anchor) {
			insert_dev(target, code, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(code, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(code, null);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(code);
			}

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(25:1) <Block>",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let t;
	let block;
	let current;
	const if_block_creators = [create_if_block_8, create_else_block_3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*named*/ ctx[6]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	block = new Block({
			props: {
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			div = element("div");
			if_block.c();
			t = space();
			create_component(block.$$.fragment);
			attr_dev(div, "class", "container s-PsMbAXHVBcLK");
			add_location(div, file$3, 36, 0, 608);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			append_dev(div, t);
			mount_component(block, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, t);
			}

			const block_changes = {};

			if (dirty & /*$$scope, python_code, dependency, named, dependency_index, endpoint_parameters, dependency_failures, root, current_language, js_code, js_parameters*/ 16778239) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if_blocks[current_block_type_index].d();
			destroy_component(block);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance$5($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('CodeSnippets', slots, []);
	let { dependency } = $$props;
	let { dependency_index } = $$props;
	let { root } = $$props;
	let { dependency_failures } = $$props;
	let { endpoint_parameters } = $$props;
	let { js_parameters } = $$props;
	let { named } = $$props;
	let { current_language } = $$props;
	let python_code;
	let js_code;
	let blob_components = ["Audio", "File", "Image", "Video"];
	let blob_examples = endpoint_parameters.filter(param => blob_components.includes(param.component));

	$$self.$$.on_mount.push(function () {
		if (dependency === undefined && !('dependency' in $$props || $$self.$$.bound[$$self.$$.props['dependency']])) {
			console.warn("<CodeSnippets> was created without expected prop 'dependency'");
		}

		if (dependency_index === undefined && !('dependency_index' in $$props || $$self.$$.bound[$$self.$$.props['dependency_index']])) {
			console.warn("<CodeSnippets> was created without expected prop 'dependency_index'");
		}

		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<CodeSnippets> was created without expected prop 'root'");
		}

		if (dependency_failures === undefined && !('dependency_failures' in $$props || $$self.$$.bound[$$self.$$.props['dependency_failures']])) {
			console.warn("<CodeSnippets> was created without expected prop 'dependency_failures'");
		}

		if (endpoint_parameters === undefined && !('endpoint_parameters' in $$props || $$self.$$.bound[$$self.$$.props['endpoint_parameters']])) {
			console.warn("<CodeSnippets> was created without expected prop 'endpoint_parameters'");
		}

		if (js_parameters === undefined && !('js_parameters' in $$props || $$self.$$.bound[$$self.$$.props['js_parameters']])) {
			console.warn("<CodeSnippets> was created without expected prop 'js_parameters'");
		}

		if (named === undefined && !('named' in $$props || $$self.$$.bound[$$self.$$.props['named']])) {
			console.warn("<CodeSnippets> was created without expected prop 'named'");
		}

		if (current_language === undefined && !('current_language' in $$props || $$self.$$.bound[$$self.$$.props['current_language']])) {
			console.warn("<CodeSnippets> was created without expected prop 'current_language'");
		}
	});

	const writable_props = [
		'dependency',
		'dependency_index',
		'root',
		'dependency_failures',
		'endpoint_parameters',
		'js_parameters',
		'named',
		'current_language'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CodeSnippets> was created with unknown prop '${key}'`);
	});

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			python_code = $$value;
			$$invalidate(8, python_code);
		});
	}

	function div1_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			js_code = $$value;
			$$invalidate(9, js_code);
		});
	}

	$$self.$$set = $$props => {
		if ('dependency' in $$props) $$invalidate(0, dependency = $$props.dependency);
		if ('dependency_index' in $$props) $$invalidate(1, dependency_index = $$props.dependency_index);
		if ('root' in $$props) $$invalidate(2, root = $$props.root);
		if ('dependency_failures' in $$props) $$invalidate(3, dependency_failures = $$props.dependency_failures);
		if ('endpoint_parameters' in $$props) $$invalidate(4, endpoint_parameters = $$props.endpoint_parameters);
		if ('js_parameters' in $$props) $$invalidate(5, js_parameters = $$props.js_parameters);
		if ('named' in $$props) $$invalidate(6, named = $$props.named);
		if ('current_language' in $$props) $$invalidate(7, current_language = $$props.current_language);
	};

	$$self.$capture_state = () => ({
		CopyButton,
		represent_value,
		Block,
		EndpointDetail,
		dependency,
		dependency_index,
		root,
		dependency_failures,
		endpoint_parameters,
		js_parameters,
		named,
		current_language,
		python_code,
		js_code,
		blob_components,
		blob_examples
	});

	$$self.$inject_state = $$props => {
		if ('dependency' in $$props) $$invalidate(0, dependency = $$props.dependency);
		if ('dependency_index' in $$props) $$invalidate(1, dependency_index = $$props.dependency_index);
		if ('root' in $$props) $$invalidate(2, root = $$props.root);
		if ('dependency_failures' in $$props) $$invalidate(3, dependency_failures = $$props.dependency_failures);
		if ('endpoint_parameters' in $$props) $$invalidate(4, endpoint_parameters = $$props.endpoint_parameters);
		if ('js_parameters' in $$props) $$invalidate(5, js_parameters = $$props.js_parameters);
		if ('named' in $$props) $$invalidate(6, named = $$props.named);
		if ('current_language' in $$props) $$invalidate(7, current_language = $$props.current_language);
		if ('python_code' in $$props) $$invalidate(8, python_code = $$props.python_code);
		if ('js_code' in $$props) $$invalidate(9, js_code = $$props.js_code);
		if ('blob_components' in $$props) $$invalidate(10, blob_components = $$props.blob_components);
		if ('blob_examples' in $$props) $$invalidate(11, blob_examples = $$props.blob_examples);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		dependency,
		dependency_index,
		root,
		dependency_failures,
		endpoint_parameters,
		js_parameters,
		named,
		current_language,
		python_code,
		js_code,
		blob_components,
		blob_examples,
		div1_binding,
		div1_binding_1
	];
}

class CodeSnippets extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
			dependency: 0,
			dependency_index: 1,
			root: 2,
			dependency_failures: 3,
			endpoint_parameters: 4,
			js_parameters: 5,
			named: 6,
			current_language: 7
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CodeSnippets",
			options,
			id: create_fragment$5.name
		});
	}

	get dependency() {
		throw new Error("<CodeSnippets>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dependency(value) {
		throw new Error("<CodeSnippets>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dependency_index() {
		throw new Error("<CodeSnippets>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dependency_index(value) {
		throw new Error("<CodeSnippets>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<CodeSnippets>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<CodeSnippets>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dependency_failures() {
		throw new Error("<CodeSnippets>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dependency_failures(value) {
		throw new Error("<CodeSnippets>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get endpoint_parameters() {
		throw new Error("<CodeSnippets>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set endpoint_parameters(value) {
		throw new Error("<CodeSnippets>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get js_parameters() {
		throw new Error("<CodeSnippets>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set js_parameters(value) {
		throw new Error("<CodeSnippets>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get named() {
		throw new Error("<CodeSnippets>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set named(value) {
		throw new Error("<CodeSnippets>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get current_language() {
		throw new Error("<CodeSnippets>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set current_language(value) {
		throw new Error("<CodeSnippets>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const TryButton_svelte_svelte_type_style_lang = '';

/* src/api_docs/TryButton.svelte generated by Svelte v4.0.0 */
const file$2 = "src/api_docs/TryButton.svelte";

// (7:0) <BaseButton variant="primary" on:click={run.bind(null, dependency_index)}>
function create_default_slot$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Try It Out");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(7:0) <BaseButton variant=\\\"primary\\\" on:click={run.bind(null, dependency_index)}>",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let span;
	let t;
	let basebutton;
	let current;

	basebutton = new Button({
			props: {
				variant: "primary",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	basebutton.$on("click", function () {
		if (is_function$1(/*run*/ ctx[1].bind(null, /*dependency_index*/ ctx[0]))) /*run*/ ctx[1].bind(null, /*dependency_index*/ ctx[0]).apply(this, arguments);
	});

	const block = {
		c: function create() {
			span = element("span");
			t = space();
			create_component(basebutton.$$.fragment);
			attr_dev(span, "class", "space s-0Q2i0KwaNprW");
			add_location(span, file$2, 7, 0, 126);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			insert_dev(target, t, anchor);
			mount_component(basebutton, target, anchor);
			current = true;
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;
			const basebutton_changes = {};

			if (dirty & /*$$scope*/ 4) {
				basebutton_changes.$$scope = { dirty, ctx };
			}

			basebutton.$set(basebutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(basebutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(basebutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
				detach_dev(t);
			}

			destroy_component(basebutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('TryButton', slots, []);
	let { dependency_index } = $$props;
	let { run } = $$props;

	$$self.$$.on_mount.push(function () {
		if (dependency_index === undefined && !('dependency_index' in $$props || $$self.$$.bound[$$self.$$.props['dependency_index']])) {
			console.warn("<TryButton> was created without expected prop 'dependency_index'");
		}

		if (run === undefined && !('run' in $$props || $$self.$$.bound[$$self.$$.props['run']])) {
			console.warn("<TryButton> was created without expected prop 'run'");
		}
	});

	const writable_props = ['dependency_index', 'run'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TryButton> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('dependency_index' in $$props) $$invalidate(0, dependency_index = $$props.dependency_index);
		if ('run' in $$props) $$invalidate(1, run = $$props.run);
	};

	$$self.$capture_state = () => ({ BaseButton: Button, dependency_index, run });

	$$self.$inject_state = $$props => {
		if ('dependency_index' in $$props) $$invalidate(0, dependency_index = $$props.dependency_index);
		if ('run' in $$props) $$invalidate(1, run = $$props.run);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [dependency_index, run];
}

class TryButton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { dependency_index: 0, run: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TryButton",
			options,
			id: create_fragment$4.name
		});
	}

	get dependency_index() {
		throw new Error("<TryButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dependency_index(value) {
		throw new Error("<TryButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get run() {
		throw new Error("<TryButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set run(value) {
		throw new Error("<TryButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const python = ""+new URL('python-20e39c92.svg', import.meta.url).href+"";

const javascript = ""+new URL('javascript-850cf94b.svg', import.meta.url).href+"";

const ApiDocs_svelte_svelte_type_style_lang = '';

/* src/api_docs/ApiDocs.svelte generated by Svelte v4.0.0 */

const { Object: Object_1$1 } = globals;
const file$1 = "src/api_docs/ApiDocs.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	child_ctx[20] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	child_ctx[20] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[22] = list[i][0];
	child_ctx[23] = list[i][1];
	return child_ctx;
}

// (100:0) {#if info}
function create_if_block$2(ctx) {
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty & /*info*/ 32) show_if = null;
		if (show_if == null) show_if = !!(Object.keys(/*info*/ ctx[5].named_endpoints).length + Object.keys(/*info*/ ctx[5].unnamed_endpoints).length);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if_blocks[current_block_type_index].d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(100:0) {#if info}",
		ctx
	});

	return block;
}

// (211:1) {:else}
function create_else_block(ctx) {
	let noapi;
	let current;

	noapi = new NoApi({
			props: { root: /*root*/ ctx[0] },
			$$inline: true
		});

	noapi.$on("close", /*close_handler_1*/ ctx[12]);

	const block = {
		c: function create() {
			create_component(noapi.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(noapi, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const noapi_changes = {};
			if (dirty & /*root*/ 1) noapi_changes.root = /*root*/ ctx[0];
			noapi.$set(noapi_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(noapi.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(noapi.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(noapi, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(211:1) {:else}",
		ctx
	});

	return block;
}

// (101:1) {#if Object.keys(info.named_endpoints).length + Object.keys(info.unnamed_endpoints).length}
function create_if_block_1$1(ctx) {
	let div0;
	let apibanner;
	let t0;
	let div4;
	let div1;
	let p;
	let t1;
	let a0;
	let code0;
	let t3;
	let a1;
	let code1;
	let t5;
	let t6;
	let div3;
	let div2;
	let t7;
	let installsnippet;
	let t8;
	let show_if_1 = Object.keys(/*info*/ ctx[5].named_endpoints).length;
	let t9;
	let t10;
	let show_if = Object.keys(/*info*/ ctx[5].unnamed_endpoints).length;
	let t11;
	let current;

	apibanner = new ApiBanner({
			props: {
				root: /*root*/ ctx[0],
				api_count: Object.keys(/*info*/ ctx[5].named_endpoints).length + Object.keys(/*info*/ ctx[5].unnamed_endpoints).length
			},
			$$inline: true
		});

	apibanner.$on("close", /*close_handler*/ ctx[10]);
	let each_value_2 = ensure_array_like_dev(/*langs*/ ctx[7]);
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	installsnippet = new InstallSnippet({
			props: {
				current_language: /*current_language*/ ctx[2]
			},
			$$inline: true
		});

	let if_block0 = show_if_1 && create_if_block_5$1(ctx);
	let each_value_1 = ensure_array_like_dev(/*dependencies*/ ctx[1]);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
		each_blocks_1[i] = null;
	});

	let if_block1 = show_if && create_if_block_3$1(ctx);
	let each_value = ensure_array_like_dev(/*dependencies*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(apibanner.$$.fragment);
			t0 = space();
			div4 = element("div");
			div1 = element("div");
			p = element("p");
			t1 = text("Use the ");
			a0 = element("a");
			code0 = element("code");
			code0.textContent = "gradio_client";
			t3 = text("\n\t\t\t\t\tPython library or the\n\t\t\t\t\t");
			a1 = element("a");
			code1 = element("code");
			code1.textContent = "@gradio/client";
			t5 = text(" Javascript package to query the demo via API.");
			t6 = space();
			div3 = element("div");
			div2 = element("div");

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t7 = space();
			create_component(installsnippet.$$.fragment);
			t8 = space();
			if (if_block0) if_block0.c();
			t9 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t10 = space();
			if (if_block1) if_block1.c();
			t11 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div0, "class", "banner-wrap s-GdibNnnboSJ4");
			add_location(div0, file$1, 148, 2, 3547);
			attr_dev(code0, "class", "library s-GdibNnnboSJ4");
			add_location(code0, file$1, 161, 22, 3885);
			attr_dev(a0, "href", "https://gradio.app/docs/#python-client");
			attr_dev(a0, "target", "_blank");
			add_location(a0, file$1, 159, 13, 3808);
			attr_dev(code1, "class", "library s-GdibNnnboSJ4");
			add_location(code1, file$1, 165, 7, 4046);
			attr_dev(a1, "href", "https://gradio.app/docs/#javascript-client");
			attr_dev(a1, "target", "_blank");
			add_location(a1, file$1, 164, 5, 3970);
			add_location(p, file$1, 158, 4, 3791);
			attr_dev(div1, "class", "client-doc s-GdibNnnboSJ4");
			add_location(div1, file$1, 157, 3, 3762);
			attr_dev(div2, "class", "snippets s-GdibNnnboSJ4");
			add_location(div2, file$1, 170, 4, 4195);
			attr_dev(div3, "class", "endpoint s-GdibNnnboSJ4");
			add_location(div3, file$1, 169, 3, 4168);
			attr_dev(div4, "class", "docs-wrap s-GdibNnnboSJ4");
			add_location(div4, file$1, 156, 2, 3735);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(apibanner, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, div1);
			append_dev(div1, p);
			append_dev(p, t1);
			append_dev(p, a0);
			append_dev(a0, code0);
			append_dev(p, t3);
			append_dev(p, a1);
			append_dev(a1, code1);
			append_dev(p, t5);
			append_dev(div4, t6);
			append_dev(div4, div3);
			append_dev(div3, div2);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				if (each_blocks_2[i]) {
					each_blocks_2[i].m(div2, null);
				}
			}

			append_dev(div3, t7);
			mount_component(installsnippet, div3, null);
			append_dev(div3, t8);
			if (if_block0) if_block0.m(div3, null);
			append_dev(div3, t9);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				if (each_blocks_1[i]) {
					each_blocks_1[i].m(div3, null);
				}
			}

			append_dev(div3, t10);
			if (if_block1) if_block1.m(div3, null);
			append_dev(div3, t11);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div3, null);
				}
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			const apibanner_changes = {};
			if (dirty & /*root*/ 1) apibanner_changes.root = /*root*/ ctx[0];
			if (dirty & /*info*/ 32) apibanner_changes.api_count = Object.keys(/*info*/ ctx[5].named_endpoints).length + Object.keys(/*info*/ ctx[5].unnamed_endpoints).length;
			apibanner.$set(apibanner_changes);

			if (dirty & /*current_language, langs*/ 132) {
				each_value_2 = ensure_array_like_dev(/*langs*/ ctx[7]);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(div2, null);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_2.length;
			}

			const installsnippet_changes = {};
			if (dirty & /*current_language*/ 4) installsnippet_changes.current_language = /*current_language*/ ctx[2];
			installsnippet.$set(installsnippet_changes);
			if (dirty & /*info*/ 32) show_if_1 = Object.keys(/*info*/ ctx[5].named_endpoints).length;

			if (show_if_1) {
				if (if_block0) ; else {
					if_block0 = create_if_block_5$1(ctx);
					if_block0.c();
					if_block0.m(div3, t9);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*info, dependencies, js_info, is_running, current_language, root, dependency_failures*/ 127) {
				each_value_1 = ensure_array_like_dev(/*dependencies*/ ctx[1]);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
						transition_in(each_blocks_1[i], 1);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						transition_in(each_blocks_1[i], 1);
						each_blocks_1[i].m(div3, t10);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*info*/ 32) show_if = Object.keys(/*info*/ ctx[5].unnamed_endpoints).length;

			if (show_if) {
				if (if_block1) ; else {
					if_block1 = create_if_block_3$1(ctx);
					if_block1.c();
					if_block1.m(div3, t11);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*info, js_info, is_running, current_language, dependencies, root, dependency_failures*/ 127) {
				each_value = ensure_array_like_dev(/*dependencies*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div3, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out_1(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(apibanner.$$.fragment, local);
			transition_in(installsnippet.$$.fragment, local);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(apibanner.$$.fragment, local);
			transition_out(installsnippet.$$.fragment, local);
			each_blocks_1 = each_blocks_1.filter(Boolean);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div0);
				detach_dev(t0);
				detach_dev(div4);
			}

			destroy_component(apibanner);
			destroy_each(each_blocks_2, detaching);
			destroy_component(installsnippet);
			if (if_block0) if_block0.d();
			destroy_each(each_blocks_1, detaching);
			if (if_block1) if_block1.d();
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(101:1) {#if Object.keys(info.named_endpoints).length + Object.keys(info.unnamed_endpoints).length}",
		ctx
	});

	return block;
}

// (125:5) {#each langs as [language, img]}
function create_each_block_2(ctx) {
	let li;
	let img;
	let img_src_value;
	let t0;
	let t1_value = /*language*/ ctx[22] + "";
	let t1;
	let t2;
	let li_class_value;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[11](/*language*/ ctx[22]);
	}

	const block = {
		c: function create() {
			li = element("li");
			img = element("img");
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			if (!src_url_equal(img.src, img_src_value = /*img*/ ctx[23])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "s-GdibNnnboSJ4");
			add_location(img, file$1, 177, 7, 4432);

			attr_dev(li, "class", li_class_value = "snippet " + (/*current_language*/ ctx[2] === /*language*/ ctx[22]
			? 'current-lang'
			: 'inactive-lang') + " s-GdibNnnboSJ4");

			add_location(li, file$1, 172, 6, 4262);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, img);
			append_dev(li, t0);
			append_dev(li, t1);
			append_dev(li, t2);

			if (!mounted) {
				dispose = listen_dev(li, "click", click_handler, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*current_language*/ 4 && li_class_value !== (li_class_value = "snippet " + (/*current_language*/ ctx[2] === /*language*/ ctx[22]
			? 'current-lang'
			: 'inactive-lang') + " s-GdibNnnboSJ4")) {
				attr_dev(li, "class", li_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(li);
			}

			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(125:5) {#each langs as [language, img]}",
		ctx
	});

	return block;
}

// (138:4) {#if Object.keys(info.named_endpoints).length}
function create_if_block_5$1(ctx) {
	let h2;

	const block = {
		c: function create() {
			h2 = element("h2");
			h2.textContent = "Named Endpoints";
			attr_dev(h2, "class", "header s-GdibNnnboSJ4");
			add_location(h2, file$1, 185, 5, 4610);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(h2);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5$1.name,
		type: "if",
		source: "(138:4) {#if Object.keys(info.named_endpoints).length}",
		ctx
	});

	return block;
}

// (143:5) {#if dependency.api_name}
function create_if_block_4$1(ctx) {
	let div;
	let codesnippets;
	let t;
	let responseobject;
	let current;

	codesnippets = new CodeSnippets({
			props: {
				named: true,
				endpoint_parameters: /*info*/ ctx[5].named_endpoints["/" + /*dependency*/ ctx[18].api_name].parameters,
				js_parameters: /*js_info*/ ctx[6].named_endpoints["/" + /*dependency*/ ctx[18].api_name].parameters,
				dependency: /*dependency*/ ctx[18],
				dependency_index: /*dependency_index*/ ctx[20],
				current_language: /*current_language*/ ctx[2],
				root: /*root*/ ctx[0],
				dependency_failures: /*dependency_failures*/ ctx[4]
			},
			$$inline: true
		});

	responseobject = new ResponseObject({
			props: {
				endpoint_returns: /*info*/ ctx[5].named_endpoints["/" + /*dependency*/ ctx[18].api_name].returns,
				js_returns: /*js_info*/ ctx[6].named_endpoints["/" + /*dependency*/ ctx[18].api_name].returns,
				is_running: /*is_running*/ ctx[3],
				current_language: /*current_language*/ ctx[2]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(codesnippets.$$.fragment);
			t = space();
			create_component(responseobject.$$.fragment);
			attr_dev(div, "class", "endpoint-container s-GdibNnnboSJ4");
			add_location(div, file$1, 190, 6, 4755);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(codesnippets, div, null);
			append_dev(div, t);
			mount_component(responseobject, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const codesnippets_changes = {};
			if (dirty & /*info, dependencies*/ 34) codesnippets_changes.endpoint_parameters = /*info*/ ctx[5].named_endpoints["/" + /*dependency*/ ctx[18].api_name].parameters;
			if (dirty & /*js_info, dependencies*/ 66) codesnippets_changes.js_parameters = /*js_info*/ ctx[6].named_endpoints["/" + /*dependency*/ ctx[18].api_name].parameters;
			if (dirty & /*dependencies*/ 2) codesnippets_changes.dependency = /*dependency*/ ctx[18];
			if (dirty & /*current_language*/ 4) codesnippets_changes.current_language = /*current_language*/ ctx[2];
			if (dirty & /*root*/ 1) codesnippets_changes.root = /*root*/ ctx[0];
			if (dirty & /*dependency_failures*/ 16) codesnippets_changes.dependency_failures = /*dependency_failures*/ ctx[4];
			codesnippets.$set(codesnippets_changes);
			const responseobject_changes = {};
			if (dirty & /*info, dependencies*/ 34) responseobject_changes.endpoint_returns = /*info*/ ctx[5].named_endpoints["/" + /*dependency*/ ctx[18].api_name].returns;
			if (dirty & /*js_info, dependencies*/ 66) responseobject_changes.js_returns = /*js_info*/ ctx[6].named_endpoints["/" + /*dependency*/ ctx[18].api_name].returns;
			if (dirty & /*is_running*/ 8) responseobject_changes.is_running = /*is_running*/ ctx[3];
			if (dirty & /*current_language*/ 4) responseobject_changes.current_language = /*current_language*/ ctx[2];
			responseobject.$set(responseobject_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(codesnippets.$$.fragment, local);
			transition_in(responseobject.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(codesnippets.$$.fragment, local);
			transition_out(responseobject.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(codesnippets);
			destroy_component(responseobject);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$1.name,
		type: "if",
		source: "(143:5) {#if dependency.api_name}",
		ctx
	});

	return block;
}

// (142:4) {#each dependencies as dependency, dependency_index}
function create_each_block_1(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*dependency*/ ctx[18].api_name && create_if_block_4$1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*dependency*/ ctx[18].api_name) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*dependencies*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_4$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(142:4) {#each dependencies as dependency, dependency_index}",
		ctx
	});

	return block;
}

// (179:4) {#if Object.keys(info.unnamed_endpoints).length}
function create_if_block_3$1(ctx) {
	let h2;

	const block = {
		c: function create() {
			h2 = element("h2");
			h2.textContent = "Unnamed Endpoints";
			attr_dev(h2, "class", "header s-GdibNnnboSJ4");
			add_location(h2, file$1, 226, 5, 5638);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(h2);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$1.name,
		type: "if",
		source: "(179:4) {#if Object.keys(info.unnamed_endpoints).length}",
		ctx
	});

	return block;
}

// (184:5) {#if info.unnamed_endpoints[dependency_index]}
function create_if_block_2$1(ctx) {
	let div;
	let codesnippets;
	let t0;
	let responseobject;
	let t1;
	let current;

	codesnippets = new CodeSnippets({
			props: {
				named: false,
				endpoint_parameters: /*info*/ ctx[5].unnamed_endpoints[/*dependency_index*/ ctx[20]].parameters,
				js_parameters: /*js_info*/ ctx[6].unnamed_endpoints[/*dependency_index*/ ctx[20]].parameters,
				dependency: /*dependency*/ ctx[18],
				dependency_index: /*dependency_index*/ ctx[20],
				current_language: /*current_language*/ ctx[2],
				root: /*root*/ ctx[0],
				dependency_failures: /*dependency_failures*/ ctx[4]
			},
			$$inline: true
		});

	responseobject = new ResponseObject({
			props: {
				endpoint_returns: /*info*/ ctx[5].unnamed_endpoints[/*dependency_index*/ ctx[20]].returns,
				js_returns: /*js_info*/ ctx[6].unnamed_endpoints[/*dependency_index*/ ctx[20]].returns,
				is_running: /*is_running*/ ctx[3],
				current_language: /*current_language*/ ctx[2]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(codesnippets.$$.fragment);
			t0 = space();
			create_component(responseobject.$$.fragment);
			t1 = space();
			attr_dev(div, "class", "endpoint-container s-GdibNnnboSJ4");
			add_location(div, file$1, 231, 6, 5806);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(codesnippets, div, null);
			append_dev(div, t0);
			mount_component(responseobject, div, null);
			append_dev(div, t1);
			current = true;
		},
		p: function update(ctx, dirty) {
			const codesnippets_changes = {};
			if (dirty & /*info*/ 32) codesnippets_changes.endpoint_parameters = /*info*/ ctx[5].unnamed_endpoints[/*dependency_index*/ ctx[20]].parameters;
			if (dirty & /*js_info*/ 64) codesnippets_changes.js_parameters = /*js_info*/ ctx[6].unnamed_endpoints[/*dependency_index*/ ctx[20]].parameters;
			if (dirty & /*dependencies*/ 2) codesnippets_changes.dependency = /*dependency*/ ctx[18];
			if (dirty & /*current_language*/ 4) codesnippets_changes.current_language = /*current_language*/ ctx[2];
			if (dirty & /*root*/ 1) codesnippets_changes.root = /*root*/ ctx[0];
			if (dirty & /*dependency_failures*/ 16) codesnippets_changes.dependency_failures = /*dependency_failures*/ ctx[4];
			codesnippets.$set(codesnippets_changes);
			const responseobject_changes = {};
			if (dirty & /*info*/ 32) responseobject_changes.endpoint_returns = /*info*/ ctx[5].unnamed_endpoints[/*dependency_index*/ ctx[20]].returns;
			if (dirty & /*js_info*/ 64) responseobject_changes.js_returns = /*js_info*/ ctx[6].unnamed_endpoints[/*dependency_index*/ ctx[20]].returns;
			if (dirty & /*is_running*/ 8) responseobject_changes.is_running = /*is_running*/ ctx[3];
			if (dirty & /*current_language*/ 4) responseobject_changes.current_language = /*current_language*/ ctx[2];
			responseobject.$set(responseobject_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(codesnippets.$$.fragment, local);
			transition_in(responseobject.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(codesnippets.$$.fragment, local);
			transition_out(responseobject.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(codesnippets);
			destroy_component(responseobject);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(184:5) {#if info.unnamed_endpoints[dependency_index]}",
		ctx
	});

	return block;
}

// (183:4) {#each dependencies as dependency, dependency_index}
function create_each_block$1(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*info*/ ctx[5].unnamed_endpoints[/*dependency_index*/ ctx[20]] && create_if_block_2$1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*info*/ ctx[5].unnamed_endpoints[/*dependency_index*/ ctx[20]]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*info*/ 32) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(183:4) {#each dependencies as dependency, dependency_index}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*info*/ ctx[5] && create_if_block$2(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*info*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*info*/ 32) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ApiDocs', slots, []);
	let { instance_map } = $$props;
	let { dependencies } = $$props;
	let { root } = $$props;
	let { app } = $$props;

	if (root === "") {
		root = location.protocol + "//" + location.host + location.pathname;
	}

	if (!root.endsWith("/")) {
		root += "/";
	}

	let current_language = "python";
	const langs = [["python", python], ["javascript", javascript]];
	let is_running = false;

	let dependency_inputs = dependencies.map(dependency => dependency.inputs.map(_id => {
		let default_data = instance_map[_id].documentation?.example_data;

		if (default_data === undefined) {
			default_data = "";
		} else if (typeof default_data === "object") {
			default_data = JSON.stringify(default_data);
		}

		return default_data;
	}));

	let dependency_outputs = dependencies.map(dependency => new Array(dependency.outputs.length));
	let dependency_failures = dependencies.map(dependency => new Array(dependency.inputs.length).fill(false));

	async function get_info() {
		let response = await fetch(root + "info");
		let data = await response.json();
		return data;
	}

	async function get_js_info() {
		let js_api_info = await app.view_api();
		return js_api_info;
	}

	let info;
	let js_info;
	get_info().then(data => $$invalidate(5, info = data));
	get_js_info().then(js_api_info => $$invalidate(6, js_info = js_api_info));

	async function run(index) {
		$$invalidate(3, is_running = true);
		let dependency = dependencies[index];
		let attempted_component_index = 0;

		try {
			var inputs = dependency_inputs[index].map((input_val, i) => {
				attempted_component_index = i;
				let component = instance_map[dependency.inputs[i]];

				// @ts-ignore
				input_val = represent_value(input_val, component.documentation?.type?.input_payload || component.documentation?.type?.payload);

				$$invalidate(4, dependency_failures[index][attempted_component_index] = false, dependency_failures);
				return input_val;
			});
		} catch(err) {
			$$invalidate(4, dependency_failures[index][attempted_component_index] = true, dependency_failures);
			$$invalidate(3, is_running = false);
			return;
		}

		let [response, status_code] = await post_data(`${root}run/${dependency.api_name}`, { data: inputs });
		$$invalidate(3, is_running = false);

		if (status_code == 200) {
			dependency_outputs[index] = response.data.map((output_val, i) => {
				let component = instance_map[dependency.outputs[i]];
				return represent_value(output_val, component.documentation?.type?.response_object || component.documentation?.type?.payload, "js");
			});
		} else {
			$$invalidate(4, dependency_failures[index] = new Array(dependency_failures[index].length).fill(true), dependency_failures);
		}
	}

	onMount(() => {
		document.body.style.overflow = "hidden";

		if ("parentIFrame" in window) {
			window.parentIFrame?.scrollTo(0, 0);
		}

		return () => {
			document.body.style.overflow = "auto";
		};
	});

	$$self.$$.on_mount.push(function () {
		if (instance_map === undefined && !('instance_map' in $$props || $$self.$$.bound[$$self.$$.props['instance_map']])) {
			console.warn("<ApiDocs> was created without expected prop 'instance_map'");
		}

		if (dependencies === undefined && !('dependencies' in $$props || $$self.$$.bound[$$self.$$.props['dependencies']])) {
			console.warn("<ApiDocs> was created without expected prop 'dependencies'");
		}

		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<ApiDocs> was created without expected prop 'root'");
		}

		if (app === undefined && !('app' in $$props || $$self.$$.bound[$$self.$$.props['app']])) {
			console.warn("<ApiDocs> was created without expected prop 'app'");
		}
	});

	const writable_props = ['instance_map', 'dependencies', 'root', 'app'];

	Object_1$1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ApiDocs> was created with unknown prop '${key}'`);
	});

	function close_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler = language => $$invalidate(2, current_language = language);

	function close_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('instance_map' in $$props) $$invalidate(8, instance_map = $$props.instance_map);
		if ('dependencies' in $$props) $$invalidate(1, dependencies = $$props.dependencies);
		if ('root' in $$props) $$invalidate(0, root = $$props.root);
		if ('app' in $$props) $$invalidate(9, app = $$props.app);
	};

	$$self.$capture_state = () => ({
		onMount,
		createEventDispatcher,
		post_data,
		NoApi,
		represent_value,
		ApiBanner,
		ResponseObject,
		InstallSnippet,
		CodeSnippets,
		TryButton,
		python,
		javascript,
		instance_map,
		dependencies,
		root,
		app,
		current_language,
		langs,
		is_running,
		dependency_inputs,
		dependency_outputs,
		dependency_failures,
		get_info,
		get_js_info,
		info,
		js_info,
		run
	});

	$$self.$inject_state = $$props => {
		if ('instance_map' in $$props) $$invalidate(8, instance_map = $$props.instance_map);
		if ('dependencies' in $$props) $$invalidate(1, dependencies = $$props.dependencies);
		if ('root' in $$props) $$invalidate(0, root = $$props.root);
		if ('app' in $$props) $$invalidate(9, app = $$props.app);
		if ('current_language' in $$props) $$invalidate(2, current_language = $$props.current_language);
		if ('is_running' in $$props) $$invalidate(3, is_running = $$props.is_running);
		if ('dependency_inputs' in $$props) dependency_inputs = $$props.dependency_inputs;
		if ('dependency_outputs' in $$props) dependency_outputs = $$props.dependency_outputs;
		if ('dependency_failures' in $$props) $$invalidate(4, dependency_failures = $$props.dependency_failures);
		if ('info' in $$props) $$invalidate(5, info = $$props.info);
		if ('js_info' in $$props) $$invalidate(6, js_info = $$props.js_info);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		root,
		dependencies,
		current_language,
		is_running,
		dependency_failures,
		info,
		js_info,
		langs,
		instance_map,
		app,
		close_handler,
		click_handler,
		close_handler_1
	];
}

class ApiDocs extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			instance_map: 8,
			dependencies: 1,
			root: 0,
			app: 9
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ApiDocs",
			options,
			id: create_fragment$3.name
		});
	}

	get instance_map() {
		throw new Error("<ApiDocs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set instance_map(value) {
		throw new Error("<ApiDocs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dependencies() {
		throw new Error("<ApiDocs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dependencies(value) {
		throw new Error("<ApiDocs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<ApiDocs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<ApiDocs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get app() {
		throw new Error("<ApiDocs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<ApiDocs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

get_store_value(X);
class Gradio {
  #id;
  #el;
  constructor(id, el, theme, version, root, autoscroll) {
    this.#id = id;
    this.theme = theme;
    this.version = version;
    this.#el = el;
    this.i18n = get_store_value(X);
    this.root = root;
    this.autoscroll = autoscroll;
  }
  dispatch(event_name, data) {
    const e = new CustomEvent("gradio", {
      bubbles: true,
      detail: { data, id: this.#id, event: event_name }
    });
    this.#el.dispatchEvent(e);
  }
}

/* src/Render.svelte generated by Svelte v4.0.0 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i].component;
	child_ctx[19] = list[i].id;
	child_ctx[2] = list[i].props;
	child_ctx[20] = list[i].children;
	child_ctx[21] = list[i].has_modes;
	return child_ctx;
}

// (69:1) {#if children && children.length}
function create_if_block$1(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = ensure_array_like_dev(/*children*/ ctx[1]);
	const get_key = ctx => /*each_id*/ ctx[19];
	validate_each_keys(ctx, each_value, get_each_context, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*children, target, root, instance_map, dynamic_ids, theme_mode*/ 235) {
				each_value = ensure_array_like_dev(/*children*/ ctx[1]);
				group_outros();
				validate_each_keys(ctx, each_value, get_each_context, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(each_1_anchor);
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(69:1) {#if children && children.length}",
		ctx
	});

	return block;
}

// (70:2) {#each children as { component, id: each_id, props, children: _children, has_modes }
function create_each_block(key_1, ctx) {
	let first;
	let render;
	let current;

	render = new Render({
			props: {
				component: /*component*/ ctx[10],
				target: /*target*/ ctx[6],
				id: /*each_id*/ ctx[19],
				props: /*props*/ ctx[2],
				root: /*root*/ ctx[3],
				instance_map: /*instance_map*/ ctx[0],
				children: /*_children*/ ctx[20],
				dynamic_ids: /*dynamic_ids*/ ctx[5],
				has_modes: /*has_modes*/ ctx[21],
				theme_mode: /*theme_mode*/ ctx[7]
			},
			$$inline: true
		});

	render.$on("destroy", /*destroy_handler*/ ctx[13]);
	render.$on("mount", /*mount_handler*/ ctx[14]);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(render.$$.fragment);
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			mount_component(render, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const render_changes = {};
			if (dirty & /*children*/ 2) render_changes.component = /*component*/ ctx[10];
			if (dirty & /*target*/ 64) render_changes.target = /*target*/ ctx[6];
			if (dirty & /*children*/ 2) render_changes.id = /*each_id*/ ctx[19];
			if (dirty & /*children*/ 2) render_changes.props = /*props*/ ctx[2];
			if (dirty & /*root*/ 8) render_changes.root = /*root*/ ctx[3];
			if (dirty & /*instance_map*/ 1) render_changes.instance_map = /*instance_map*/ ctx[0];
			if (dirty & /*children*/ 2) render_changes.children = /*_children*/ ctx[20];
			if (dirty & /*dynamic_ids*/ 32) render_changes.dynamic_ids = /*dynamic_ids*/ ctx[5];
			if (dirty & /*children*/ 2) render_changes.has_modes = /*has_modes*/ ctx[21];
			if (dirty & /*theme_mode*/ 128) render_changes.theme_mode = /*theme_mode*/ ctx[7];
			render.$set(render_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(render.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(render.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(first);
			}

			destroy_component(render, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(70:2) {#each children as { component, id: each_id, props, children: _children, has_modes }",
		ctx
	});

	return block;
}

// (56:0) <svelte:component  this={component}  bind:this={instance_map[id].instance}  bind:value={instance_map[id].props.value}  elem_id={("elem_id" in props && props.elem_id) || `component-${id}`}  elem_classes={("elem_classes" in props && props.elem_classes) || []}  on:prop_change={handle_prop_change}  {target}  {...props}  {theme_mode}  {root}  gradio={new Gradio(id, target, theme_mode, version, root, autoscroll)} >
function create_default_slot(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*children*/ ctx[1] && /*children*/ ctx[1].length && create_if_block$1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*children*/ ctx[1] && /*children*/ ctx[1].length) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*children*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(56:0) <svelte:component  this={component}  bind:this={instance_map[id].instance}  bind:value={instance_map[id].props.value}  elem_id={(\\\"elem_id\\\" in props && props.elem_id) || `component-${id}`}  elem_classes={(\\\"elem_classes\\\" in props && props.elem_classes) || []}  on:prop_change={handle_prop_change}  {target}  {...props}  {theme_mode}  {root}  gradio={new Gradio(id, target, theme_mode, version, root, autoscroll)} >",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let switch_instance;
	let updating_value;
	let switch_instance_anchor;
	let current;

	const switch_instance_spread_levels = [
		{
			elem_id: "elem_id" in /*props*/ ctx[2] && /*props*/ ctx[2].elem_id || `component-${/*id*/ ctx[4]}`
		},
		{
			elem_classes: "elem_classes" in /*props*/ ctx[2] && /*props*/ ctx[2].elem_classes || []
		},
		{ target: /*target*/ ctx[6] },
		/*props*/ ctx[2],
		{ theme_mode: /*theme_mode*/ ctx[7] },
		{ root: /*root*/ ctx[3] },
		{
			gradio: new Gradio(/*id*/ ctx[4], /*target*/ ctx[6], /*theme_mode*/ ctx[7], /*version*/ ctx[8], /*root*/ ctx[3], /*autoscroll*/ ctx[9])
		}
	];

	function switch_instance_value_binding(value) {
		/*switch_instance_value_binding*/ ctx[16](value);
	}

	var switch_value = /*component*/ ctx[10];

	function switch_props(ctx) {
		let switch_instance_props = {
			$$slots: { default: [create_default_slot] },
			$$scope: { ctx }
		};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		if (/*instance_map*/ ctx[0][/*id*/ ctx[4]].props.value !== void 0) {
			switch_instance_props.value = /*instance_map*/ ctx[0][/*id*/ ctx[4]].props.value;
		}

		return {
			props: switch_instance_props,
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
		/*switch_instance_binding*/ ctx[15](switch_instance);
		binding_callbacks.push(() => bind(switch_instance, 'value', switch_instance_value_binding));
		switch_instance.$on("prop_change", /*handle_prop_change*/ ctx[11]);
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (switch_instance) mount_component(switch_instance, target, anchor);
			insert_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const switch_instance_changes = (dirty & /*props, id, target, theme_mode, root, Gradio, version, autoscroll*/ 988)
			? get_spread_update(switch_instance_spread_levels, [
					dirty & /*props, id*/ 20 && {
						elem_id: "elem_id" in /*props*/ ctx[2] && /*props*/ ctx[2].elem_id || `component-${/*id*/ ctx[4]}`
					},
					dirty & /*props*/ 4 && {
						elem_classes: "elem_classes" in /*props*/ ctx[2] && /*props*/ ctx[2].elem_classes || []
					},
					dirty & /*target*/ 64 && { target: /*target*/ ctx[6] },
					dirty & /*props*/ 4 && get_spread_object(/*props*/ ctx[2]),
					dirty & /*theme_mode*/ 128 && { theme_mode: /*theme_mode*/ ctx[7] },
					dirty & /*root*/ 8 && { root: /*root*/ ctx[3] },
					dirty & /*Gradio, id, target, theme_mode, version, root, autoscroll*/ 984 && {
						gradio: new Gradio(/*id*/ ctx[4], /*target*/ ctx[6], /*theme_mode*/ ctx[7], /*version*/ ctx[8], /*root*/ ctx[3], /*autoscroll*/ ctx[9])
					}
				])
			: {};

			if (dirty & /*$$scope, children, target, root, instance_map, dynamic_ids, theme_mode*/ 16777451) {
				switch_instance_changes.$$scope = { dirty, ctx };
			}

			if (!updating_value && dirty & /*instance_map, id*/ 17) {
				updating_value = true;
				switch_instance_changes.value = /*instance_map*/ ctx[0][/*id*/ ctx[4]].props.value;
				add_flush_callback(() => updating_value = false);
			}

			if (dirty & /*component*/ 1024 && switch_value !== (switch_value = /*component*/ ctx[10])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
					/*switch_instance_binding*/ ctx[15](switch_instance);
					binding_callbacks.push(() => bind(switch_instance, 'value', switch_instance_value_binding));
					switch_instance.$on("prop_change", /*handle_prop_change*/ ctx[11]);
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(switch_instance_anchor);
			}

			/*switch_instance_binding*/ ctx[15](null);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Render', slots, []);
	let { root } = $$props;
	let { component } = $$props;
	let { instance_map } = $$props;
	let { id } = $$props;
	let { props } = $$props;
	let { children } = $$props;
	let { dynamic_ids } = $$props;
	let { parent = null } = $$props;
	let { target } = $$props;
	let { theme_mode } = $$props;
	let { version } = $$props;
	let { autoscroll } = $$props;
	const dispatch = createEventDispatcher();
	let filtered_children = [];

	onMount(() => {
		dispatch("mount", id);

		for (const child of filtered_children) {
			dispatch("mount", child.id);
		}

		return () => {
			dispatch("destroy", id);

			for (const child of filtered_children) {
				dispatch("mount", child.id);
			}
		};
	});

	setContext("BLOCK_KEY", parent);

	function handle_prop_change(e) {
		for (const k in e.detail) {
			$$invalidate(0, instance_map[id].props[k] = e.detail[k], instance_map);
		}
	}

	$$self.$$.on_mount.push(function () {
		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<Render> was created without expected prop 'root'");
		}

		if (component === undefined && !('component' in $$props || $$self.$$.bound[$$self.$$.props['component']])) {
			console.warn("<Render> was created without expected prop 'component'");
		}

		if (instance_map === undefined && !('instance_map' in $$props || $$self.$$.bound[$$self.$$.props['instance_map']])) {
			console.warn("<Render> was created without expected prop 'instance_map'");
		}

		if (id === undefined && !('id' in $$props || $$self.$$.bound[$$self.$$.props['id']])) {
			console.warn("<Render> was created without expected prop 'id'");
		}

		if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
			console.warn("<Render> was created without expected prop 'props'");
		}

		if (children === undefined && !('children' in $$props || $$self.$$.bound[$$self.$$.props['children']])) {
			console.warn("<Render> was created without expected prop 'children'");
		}

		if (dynamic_ids === undefined && !('dynamic_ids' in $$props || $$self.$$.bound[$$self.$$.props['dynamic_ids']])) {
			console.warn("<Render> was created without expected prop 'dynamic_ids'");
		}

		if (target === undefined && !('target' in $$props || $$self.$$.bound[$$self.$$.props['target']])) {
			console.warn("<Render> was created without expected prop 'target'");
		}

		if (theme_mode === undefined && !('theme_mode' in $$props || $$self.$$.bound[$$self.$$.props['theme_mode']])) {
			console.warn("<Render> was created without expected prop 'theme_mode'");
		}

		if (version === undefined && !('version' in $$props || $$self.$$.bound[$$self.$$.props['version']])) {
			console.warn("<Render> was created without expected prop 'version'");
		}

		if (autoscroll === undefined && !('autoscroll' in $$props || $$self.$$.bound[$$self.$$.props['autoscroll']])) {
			console.warn("<Render> was created without expected prop 'autoscroll'");
		}
	});

	const writable_props = [
		'root',
		'component',
		'instance_map',
		'id',
		'props',
		'children',
		'dynamic_ids',
		'parent',
		'target',
		'theme_mode',
		'version',
		'autoscroll'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Render> was created with unknown prop '${key}'`);
	});

	function destroy_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mount_handler(event) {
		bubble.call(this, $$self, event);
	}

	function switch_instance_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			instance_map[id].instance = $$value;
			$$invalidate(0, instance_map);
		});
	}

	function switch_instance_value_binding(value) {
		if ($$self.$$.not_equal(instance_map[id].props.value, value)) {
			instance_map[id].props.value = value;
			$$invalidate(0, instance_map);
		}
	}

	$$self.$$set = $$props => {
		if ('root' in $$props) $$invalidate(3, root = $$props.root);
		if ('component' in $$props) $$invalidate(10, component = $$props.component);
		if ('instance_map' in $$props) $$invalidate(0, instance_map = $$props.instance_map);
		if ('id' in $$props) $$invalidate(4, id = $$props.id);
		if ('props' in $$props) $$invalidate(2, props = $$props.props);
		if ('children' in $$props) $$invalidate(1, children = $$props.children);
		if ('dynamic_ids' in $$props) $$invalidate(5, dynamic_ids = $$props.dynamic_ids);
		if ('parent' in $$props) $$invalidate(12, parent = $$props.parent);
		if ('target' in $$props) $$invalidate(6, target = $$props.target);
		if ('theme_mode' in $$props) $$invalidate(7, theme_mode = $$props.theme_mode);
		if ('version' in $$props) $$invalidate(8, version = $$props.version);
		if ('autoscroll' in $$props) $$invalidate(9, autoscroll = $$props.autoscroll);
	};

	$$self.$capture_state = () => ({
		Gradio,
		onMount,
		createEventDispatcher,
		setContext,
		root,
		component,
		instance_map,
		id,
		props,
		children,
		dynamic_ids,
		parent,
		target,
		theme_mode,
		version,
		autoscroll,
		dispatch,
		filtered_children,
		handle_prop_change
	});

	$$self.$inject_state = $$props => {
		if ('root' in $$props) $$invalidate(3, root = $$props.root);
		if ('component' in $$props) $$invalidate(10, component = $$props.component);
		if ('instance_map' in $$props) $$invalidate(0, instance_map = $$props.instance_map);
		if ('id' in $$props) $$invalidate(4, id = $$props.id);
		if ('props' in $$props) $$invalidate(2, props = $$props.props);
		if ('children' in $$props) $$invalidate(1, children = $$props.children);
		if ('dynamic_ids' in $$props) $$invalidate(5, dynamic_ids = $$props.dynamic_ids);
		if ('parent' in $$props) $$invalidate(12, parent = $$props.parent);
		if ('target' in $$props) $$invalidate(6, target = $$props.target);
		if ('theme_mode' in $$props) $$invalidate(7, theme_mode = $$props.theme_mode);
		if ('version' in $$props) $$invalidate(8, version = $$props.version);
		if ('autoscroll' in $$props) $$invalidate(9, autoscroll = $$props.autoscroll);
		if ('filtered_children' in $$props) $$invalidate(18, filtered_children = $$props.filtered_children);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*children, instance_map*/ 3) {
			$$invalidate(1, children = children && children.filter(v => {
				const valid_node = instance_map[v.id].type !== "statustracker";

				if (!valid_node) {
					filtered_children.push(v);
				}

				return valid_node;
			}));
		}

		if ($$self.$$.dirty & /*instance_map, id, children*/ 19) {
			{
				if (instance_map[id].type === "form") {
					if (children?.every(c => !c.props.visible)) {
						$$invalidate(2, props.visible = false, props);
					} else {
						$$invalidate(2, props.visible = true, props);
					}
				}
			}
		}
	};

	return [
		instance_map,
		children,
		props,
		root,
		id,
		dynamic_ids,
		target,
		theme_mode,
		version,
		autoscroll,
		component,
		handle_prop_change,
		parent,
		destroy_handler,
		mount_handler,
		switch_instance_binding,
		switch_instance_value_binding
	];
}

class Render extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			root: 3,
			component: 10,
			instance_map: 0,
			id: 4,
			props: 2,
			children: 1,
			dynamic_ids: 5,
			parent: 12,
			target: 6,
			theme_mode: 7,
			version: 8,
			autoscroll: 9
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Render",
			options,
			id: create_fragment$2.name
		});
	}

	get root() {
		throw new Error("<Render>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<Render>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get component() {
		throw new Error("<Render>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set component(value) {
		throw new Error("<Render>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get instance_map() {
		throw new Error("<Render>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set instance_map(value) {
		throw new Error("<Render>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Render>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Render>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get props() {
		throw new Error("<Render>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set props(value) {
		throw new Error("<Render>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get children() {
		throw new Error("<Render>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set children(value) {
		throw new Error("<Render>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dynamic_ids() {
		throw new Error("<Render>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dynamic_ids(value) {
		throw new Error("<Render>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get parent() {
		throw new Error("<Render>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set parent(value) {
		throw new Error("<Render>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get target() {
		throw new Error("<Render>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set target(value) {
		throw new Error("<Render>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get theme_mode() {
		throw new Error("<Render>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set theme_mode(value) {
		throw new Error("<Render>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get version() {
		throw new Error("<Render>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set version(value) {
		throw new Error("<Render>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autoscroll() {
		throw new Error("<Render>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autoscroll(value) {
		throw new Error("<Render>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/MountComponents.svelte generated by Svelte v4.0.0 */

function create_fragment$1(ctx) {
	let render;
	let current;

	render = new Render({
			props: {
				component: /*rootNode*/ ctx[0].component,
				id: /*rootNode*/ ctx[0].id,
				props: /*rootNode*/ ctx[0].props,
				children: /*rootNode*/ ctx[0].children,
				dynamic_ids: /*dynamic_ids*/ ctx[1],
				instance_map: /*instance_map*/ ctx[2],
				root: /*root*/ ctx[3],
				target: /*target*/ ctx[4],
				theme_mode: /*theme_mode*/ ctx[5],
				version: /*version*/ ctx[6],
				autoscroll: /*autoscroll*/ ctx[7]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(render.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(render, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const render_changes = {};
			if (dirty & /*rootNode*/ 1) render_changes.component = /*rootNode*/ ctx[0].component;
			if (dirty & /*rootNode*/ 1) render_changes.id = /*rootNode*/ ctx[0].id;
			if (dirty & /*rootNode*/ 1) render_changes.props = /*rootNode*/ ctx[0].props;
			if (dirty & /*rootNode*/ 1) render_changes.children = /*rootNode*/ ctx[0].children;
			if (dirty & /*dynamic_ids*/ 2) render_changes.dynamic_ids = /*dynamic_ids*/ ctx[1];
			if (dirty & /*instance_map*/ 4) render_changes.instance_map = /*instance_map*/ ctx[2];
			if (dirty & /*root*/ 8) render_changes.root = /*root*/ ctx[3];
			if (dirty & /*target*/ 16) render_changes.target = /*target*/ ctx[4];
			if (dirty & /*theme_mode*/ 32) render_changes.theme_mode = /*theme_mode*/ ctx[5];
			if (dirty & /*version*/ 64) render_changes.version = /*version*/ ctx[6];
			if (dirty & /*autoscroll*/ 128) render_changes.autoscroll = /*autoscroll*/ ctx[7];
			render.$set(render_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(render.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(render.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(render, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('MountComponents', slots, []);
	let { rootNode } = $$props;
	let { dynamic_ids } = $$props;
	let { instance_map } = $$props;
	let { root } = $$props;
	let { target } = $$props;
	let { theme_mode } = $$props;
	let { version } = $$props;
	let { autoscroll } = $$props;
	const dispatch = createEventDispatcher();

	onMount(() => {
		dispatch("mount");
	});

	$$self.$$.on_mount.push(function () {
		if (rootNode === undefined && !('rootNode' in $$props || $$self.$$.bound[$$self.$$.props['rootNode']])) {
			console.warn("<MountComponents> was created without expected prop 'rootNode'");
		}

		if (dynamic_ids === undefined && !('dynamic_ids' in $$props || $$self.$$.bound[$$self.$$.props['dynamic_ids']])) {
			console.warn("<MountComponents> was created without expected prop 'dynamic_ids'");
		}

		if (instance_map === undefined && !('instance_map' in $$props || $$self.$$.bound[$$self.$$.props['instance_map']])) {
			console.warn("<MountComponents> was created without expected prop 'instance_map'");
		}

		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<MountComponents> was created without expected prop 'root'");
		}

		if (target === undefined && !('target' in $$props || $$self.$$.bound[$$self.$$.props['target']])) {
			console.warn("<MountComponents> was created without expected prop 'target'");
		}

		if (theme_mode === undefined && !('theme_mode' in $$props || $$self.$$.bound[$$self.$$.props['theme_mode']])) {
			console.warn("<MountComponents> was created without expected prop 'theme_mode'");
		}

		if (version === undefined && !('version' in $$props || $$self.$$.bound[$$self.$$.props['version']])) {
			console.warn("<MountComponents> was created without expected prop 'version'");
		}

		if (autoscroll === undefined && !('autoscroll' in $$props || $$self.$$.bound[$$self.$$.props['autoscroll']])) {
			console.warn("<MountComponents> was created without expected prop 'autoscroll'");
		}
	});

	const writable_props = [
		'rootNode',
		'dynamic_ids',
		'instance_map',
		'root',
		'target',
		'theme_mode',
		'version',
		'autoscroll'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MountComponents> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('rootNode' in $$props) $$invalidate(0, rootNode = $$props.rootNode);
		if ('dynamic_ids' in $$props) $$invalidate(1, dynamic_ids = $$props.dynamic_ids);
		if ('instance_map' in $$props) $$invalidate(2, instance_map = $$props.instance_map);
		if ('root' in $$props) $$invalidate(3, root = $$props.root);
		if ('target' in $$props) $$invalidate(4, target = $$props.target);
		if ('theme_mode' in $$props) $$invalidate(5, theme_mode = $$props.theme_mode);
		if ('version' in $$props) $$invalidate(6, version = $$props.version);
		if ('autoscroll' in $$props) $$invalidate(7, autoscroll = $$props.autoscroll);
	};

	$$self.$capture_state = () => ({
		onMount,
		createEventDispatcher,
		Render,
		rootNode,
		dynamic_ids,
		instance_map,
		root,
		target,
		theme_mode,
		version,
		autoscroll,
		dispatch
	});

	$$self.$inject_state = $$props => {
		if ('rootNode' in $$props) $$invalidate(0, rootNode = $$props.rootNode);
		if ('dynamic_ids' in $$props) $$invalidate(1, dynamic_ids = $$props.dynamic_ids);
		if ('instance_map' in $$props) $$invalidate(2, instance_map = $$props.instance_map);
		if ('root' in $$props) $$invalidate(3, root = $$props.root);
		if ('target' in $$props) $$invalidate(4, target = $$props.target);
		if ('theme_mode' in $$props) $$invalidate(5, theme_mode = $$props.theme_mode);
		if ('version' in $$props) $$invalidate(6, version = $$props.version);
		if ('autoscroll' in $$props) $$invalidate(7, autoscroll = $$props.autoscroll);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		rootNode,
		dynamic_ids,
		instance_map,
		root,
		target,
		theme_mode,
		version,
		autoscroll
	];
}

class MountComponents extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			rootNode: 0,
			dynamic_ids: 1,
			instance_map: 2,
			root: 3,
			target: 4,
			theme_mode: 5,
			version: 6,
			autoscroll: 7
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MountComponents",
			options,
			id: create_fragment$1.name
		});
	}

	get rootNode() {
		throw new Error("<MountComponents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootNode(value) {
		throw new Error("<MountComponents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dynamic_ids() {
		throw new Error("<MountComponents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dynamic_ids(value) {
		throw new Error("<MountComponents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get instance_map() {
		throw new Error("<MountComponents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set instance_map(value) {
		throw new Error("<MountComponents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<MountComponents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<MountComponents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get target() {
		throw new Error("<MountComponents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set target(value) {
		throw new Error("<MountComponents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get theme_mode() {
		throw new Error("<MountComponents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set theme_mode(value) {
		throw new Error("<MountComponents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get version() {
		throw new Error("<MountComponents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set version(value) {
		throw new Error("<MountComponents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autoscroll() {
		throw new Error("<MountComponents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autoscroll(value) {
		throw new Error("<MountComponents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const logo = ""+new URL('logo-0a070fcf.svg', import.meta.url).href+"";

const Blocks_svelte_svelte_type_style_lang = '';

const { Error: Error_1, Object: Object_1, console: console_1, document: document_1 } = globals;
const file = "src/Blocks.svelte";

// (538:1) {#if control_page_title}
function create_if_block_6(ctx) {
	document_1.title = /*title*/ ctx[3];
	const block = { c: noop, m: noop, d: noop };

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(538:1) {#if control_page_title}",
		ctx
	});

	return block;
}

// (541:1) {#if analytics_enabled}
function create_if_block_5(ctx) {
	let script0;
	let script0_src_value;
	let t0;
	let script1;

	const block = {
		c: function create() {
			script0 = element("script");
			script0.innerHTML = ``;
			t0 = space();
			script1 = element("script");
			script1.textContent = "window.dataLayer = window.dataLayer || [];\n\t\t\tfunction gtag() {\n\t\t\t\tdataLayer.push(arguments);\n\t\t\t}\n\t\t\tgtag(\"js\", new Date());\n\t\t\tgtag(\"config\", \"UA-156449732-1\");";
			script0.async = true;
			script0.defer = true;
			if (!src_url_equal(script0.src, script0_src_value = "https://www.googletagmanager.com/gtag/js?id=UA-156449732-1")) attr_dev(script0, "src", script0_src_value);
			add_location(script0, file, 715, 2, 17829);
			add_location(script1, file, 720, 2, 17938);
		},
		m: function mount(target, anchor) {
			insert_dev(target, script0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, script1, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(script0);
				detach_dev(t0);
				detach_dev(script1);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(541:1) {#if analytics_enabled}",
		ctx
	});

	return block;
}

// (560:2) {#if ready}
function create_if_block_4(ctx) {
	let mountcomponents;
	let current;

	mountcomponents = new MountComponents({
			props: {
				rootNode: /*rootNode*/ ctx[15],
				dynamic_ids: /*dynamic_ids*/ ctx[17],
				instance_map: /*instance_map*/ ctx[18],
				root: /*root*/ ctx[1],
				target: /*target*/ ctx[5],
				theme_mode: /*theme_mode*/ ctx[11],
				version: /*version*/ ctx[13],
				autoscroll: /*autoscroll*/ ctx[6]
			},
			$$inline: true
		});

	mountcomponents.$on("mount", /*handle_mount*/ ctx[23]);
	mountcomponents.$on("destroy", /*destroy_handler*/ ctx[30]);

	const block = {
		c: function create() {
			create_component(mountcomponents.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(mountcomponents, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const mountcomponents_changes = {};
			if (dirty[0] & /*rootNode*/ 32768) mountcomponents_changes.rootNode = /*rootNode*/ ctx[15];
			if (dirty[0] & /*dynamic_ids*/ 131072) mountcomponents_changes.dynamic_ids = /*dynamic_ids*/ ctx[17];
			if (dirty[0] & /*instance_map*/ 262144) mountcomponents_changes.instance_map = /*instance_map*/ ctx[18];
			if (dirty[0] & /*root*/ 2) mountcomponents_changes.root = /*root*/ ctx[1];
			if (dirty[0] & /*target*/ 32) mountcomponents_changes.target = /*target*/ ctx[5];
			if (dirty[0] & /*theme_mode*/ 2048) mountcomponents_changes.theme_mode = /*theme_mode*/ ctx[11];
			if (dirty[0] & /*version*/ 8192) mountcomponents_changes.version = /*version*/ ctx[13];
			if (dirty[0] & /*autoscroll*/ 64) mountcomponents_changes.autoscroll = /*autoscroll*/ ctx[6];
			mountcomponents.$set(mountcomponents_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(mountcomponents.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(mountcomponents.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(mountcomponents, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(560:2) {#if ready}",
		ctx
	});

	return block;
}

// (576:1) {#if show_footer}
function create_if_block_2(ctx) {
	let footer;
	let t0;
	let a;
	let t1_value = /*$_*/ ctx[20]("common.built_with_gradio") + "";
	let t1;
	let t2;
	let img;
	let img_src_value;
	let img_alt_value;
	let if_block = /*show_api*/ ctx[7] && create_if_block_3(ctx);

	const block = {
		c: function create() {
			footer = element("footer");
			if (if_block) if_block.c();
			t0 = space();
			a = element("a");
			t1 = text(t1_value);
			t2 = space();
			img = element("img");
			if (!src_url_equal(img.src, img_src_value = logo)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*$_*/ ctx[20]("common.logo"));
			attr_dev(img, "class", "s-CjPFPpNFMpBR");
			add_location(img, file, 770, 4, 18980);
			attr_dev(a, "href", "https://gradio.app");
			attr_dev(a, "class", "built-with s-CjPFPpNFMpBR");
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noreferrer");
			add_location(a, file, 763, 3, 18837);
			attr_dev(footer, "class", "s-CjPFPpNFMpBR");
			add_location(footer, file, 750, 2, 18565);
		},
		m: function mount(target, anchor) {
			insert_dev(target, footer, anchor);
			if (if_block) if_block.m(footer, null);
			append_dev(footer, t0);
			append_dev(footer, a);
			append_dev(a, t1);
			append_dev(a, t2);
			append_dev(a, img);
		},
		p: function update(ctx, dirty) {
			if (/*show_api*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(footer, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty[0] & /*$_*/ 1048576 && t1_value !== (t1_value = /*$_*/ ctx[20]("common.built_with_gradio") + "")) set_data_dev(t1, t1_value);

			if (dirty[0] & /*$_*/ 1048576 && img_alt_value !== (img_alt_value = /*$_*/ ctx[20]("common.logo"))) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(footer);
			}

			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(576:1) {#if show_footer}",
		ctx
	});

	return block;
}

// (578:3) {#if show_api}
function create_if_block_3(ctx) {
	let button;
	let t0_value = /*$_*/ ctx[20]("errors.use_via_api") + "";
	let t0;
	let t1;
	let img;
	let img_src_value;
	let img_alt_value;
	let t2;
	let div;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t0 = text(t0_value);
			t1 = space();
			img = element("img");
			t2 = space();
			div = element("div");
			div.textContent = "·";
			if (!src_url_equal(img.src, img_src_value = api_logo)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*$_*/ ctx[20]("common.logo"));
			attr_dev(img, "class", "s-CjPFPpNFMpBR");
			add_location(img, file, 759, 5, 18747);
			attr_dev(button, "class", "show-api s-CjPFPpNFMpBR");
			add_location(button, file, 752, 4, 18596);
			attr_dev(div, "class", "s-CjPFPpNFMpBR");
			add_location(div, file, 761, 4, 18812);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			append_dev(button, t1);
			append_dev(button, img);
			insert_dev(target, t2, anchor);
			insert_dev(target, div, anchor);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[31], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*$_*/ 1048576 && t0_value !== (t0_value = /*$_*/ ctx[20]("errors.use_via_api") + "")) set_data_dev(t0, t0_value);

			if (dirty[0] & /*$_*/ 1048576 && img_alt_value !== (img_alt_value = /*$_*/ ctx[20]("common.logo"))) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(button);
				detach_dev(t2);
				detach_dev(div);
			}

			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(578:3) {#if show_api}",
		ctx
	});

	return block;
}

// (603:0) {#if api_docs_visible && ready}
function create_if_block_1(ctx) {
	let div2;
	let div0;
	let t;
	let div1;
	let apidocs;
	let current;
	let mounted;
	let dispose;

	apidocs = new ApiDocs({
			props: {
				instance_map: /*instance_map*/ ctx[18],
				dependencies: /*dependencies*/ ctx[2],
				root: /*root*/ ctx[1],
				app: /*app*/ ctx[12]
			},
			$$inline: true
		});

	apidocs.$on("close", /*close_handler*/ ctx[33]);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			t = space();
			div1 = element("div");
			create_component(apidocs.$$.fragment);
			attr_dev(div0, "class", "backdrop s-CjPFPpNFMpBR");
			add_location(div0, file, 781, 2, 19255);
			attr_dev(div1, "class", "api-docs-wrap s-CjPFPpNFMpBR");
			add_location(div1, file, 787, 2, 19347);
			attr_dev(div2, "class", "api-docs s-CjPFPpNFMpBR");
			add_location(div2, file, 777, 1, 19091);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div2, t);
			append_dev(div2, div1);
			mount_component(apidocs, div1, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(div0, "click", /*click_handler_1*/ ctx[32], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			const apidocs_changes = {};
			if (dirty[0] & /*instance_map*/ 262144) apidocs_changes.instance_map = /*instance_map*/ ctx[18];
			if (dirty[0] & /*dependencies*/ 4) apidocs_changes.dependencies = /*dependencies*/ ctx[2];
			if (dirty[0] & /*root*/ 2) apidocs_changes.root = /*root*/ ctx[1];
			if (dirty[0] & /*app*/ 4096) apidocs_changes.app = /*app*/ ctx[12];
			apidocs.$set(apidocs_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(apidocs.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(apidocs.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div2);
			}

			destroy_component(apidocs);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(603:0) {#if api_docs_visible && ready}",
		ctx
	});

	return block;
}

// (628:0) {#if messages}
function create_if_block(ctx) {
	let toast;
	let current;

	toast = new Toast({
			props: { messages: /*messages*/ ctx[19] },
			$$inline: true
		});

	toast.$on("close", /*handle_error_close*/ ctx[22]);

	const block = {
		c: function create() {
			create_component(toast.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(toast, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const toast_changes = {};
			if (dirty[0] & /*messages*/ 524288) toast_changes.messages = /*messages*/ ctx[19];
			toast.$set(toast_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(toast.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(toast.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(toast, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(628:0) {#if messages}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block0_anchor;
	let if_block1_anchor;
	let t0;
	let div1;
	let div0;
	let t1;
	let t2;
	let t3;
	let if_block5_anchor;
	let current;
	let if_block0 = /*control_page_title*/ ctx[9] && create_if_block_6(ctx);
	let if_block1 = /*analytics_enabled*/ ctx[4] && create_if_block_5(ctx);
	let if_block2 = /*ready*/ ctx[0] && create_if_block_4(ctx);
	let if_block3 = /*show_footer*/ ctx[8] && create_if_block_2(ctx);
	let if_block4 = /*api_docs_visible*/ ctx[16] && /*ready*/ ctx[0] && create_if_block_1(ctx);
	let if_block5 = /*messages*/ ctx[19] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			if_block0_anchor = empty();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			if (if_block2) if_block2.c();
			t1 = space();
			if (if_block3) if_block3.c();
			t2 = space();
			if (if_block4) if_block4.c();
			t3 = space();
			if (if_block5) if_block5.c();
			if_block5_anchor = empty();
			attr_dev(div0, "class", "contain");
			set_style(div0, "flex-grow", /*app_mode*/ ctx[10] ? "1" : "auto");
			add_location(div0, file, 732, 1, 18215);
			attr_dev(div1, "class", "wrap s-CjPFPpNFMpBR");
			set_style(div1, "min-height", /*app_mode*/ ctx[10] ? "100%" : "auto");
			add_location(div1, file, 731, 0, 18149);
		},
		l: function claim(nodes) {
			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(document_1.head, null);
			append_dev(document_1.head, if_block0_anchor);
			if (if_block1) if_block1.m(document_1.head, null);
			append_dev(document_1.head, if_block1_anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			if (if_block2) if_block2.m(div0, null);
			append_dev(div1, t1);
			if (if_block3) if_block3.m(div1, null);
			insert_dev(target, t2, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_dev(target, t3, anchor);
			if (if_block5) if_block5.m(target, anchor);
			insert_dev(target, if_block5_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*control_page_title*/ ctx[9]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_6(ctx);
					if_block0.c();
					if_block0.m(if_block0_anchor.parentNode, if_block0_anchor);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*analytics_enabled*/ ctx[4]) {
				if (if_block1) ; else {
					if_block1 = create_if_block_5(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*ready*/ ctx[0]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*ready*/ 1) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_4(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*app_mode*/ 1024) {
				set_style(div0, "flex-grow", /*app_mode*/ ctx[10] ? "1" : "auto");
			}

			if (/*show_footer*/ ctx[8]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_2(ctx);
					if_block3.c();
					if_block3.m(div1, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (dirty[0] & /*app_mode*/ 1024) {
				set_style(div1, "min-height", /*app_mode*/ ctx[10] ? "100%" : "auto");
			}

			if (/*api_docs_visible*/ ctx[16] && /*ready*/ ctx[0]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[0] & /*api_docs_visible, ready*/ 65537) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_1(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(t3.parentNode, t3);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (/*messages*/ ctx[19]) {
				if (if_block5) {
					if_block5.p(ctx, dirty);

					if (dirty[0] & /*messages*/ 524288) {
						transition_in(if_block5, 1);
					}
				} else {
					if_block5 = create_if_block(ctx);
					if_block5.c();
					transition_in(if_block5, 1);
					if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
				}
			} else if (if_block5) {
				group_outros();

				transition_out(if_block5, 1, 1, () => {
					if_block5 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block2);
			transition_in(if_block4);
			transition_in(if_block5);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block2);
			transition_out(if_block4);
			transition_out(if_block5);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(div1);
				detach_dev(t2);
				detach_dev(t3);
				detach_dev(if_block5_anchor);
			}

			if (if_block0) if_block0.d(detaching);
			detach_dev(if_block0_anchor);
			if (if_block1) if_block1.d(detaching);
			detach_dev(if_block1_anchor);
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d(detaching);
			if (if_block5) if_block5.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const MESSAGE_QUOTE_RE = /^'([^]+)'$/;
const SHOW_DUPLICATE_MESSAGE_ON_ETA = 15;
const SHOW_MOBILE_QUEUE_WARNING_ON_ETA = 10;

function is_dep(id, type, deps) {
	for (const dep of deps) {
		for (const dep_item of dep[type]) {
			if (dep_item === id) return true;
		}
	}

	return false;
}

function has_no_default_value(value) {
	return Array.isArray(value) && value.length === 0 || value === "" || value === 0 || !value;
}

async function load_custom_component(name, mode) {
	const comps = "__ROOT_PATH__";

	try {
		if (typeof comps !== "object" || !comps?.[name] || !comps?.[name]?.[mode]) {
			throw new Error(`Component ${name} not found`);
		}

		//@ts-ignore
		const c = await comps[name][mode]();

		return { name, component: c };
	} catch(e) {
		if (mode === "interactive") {
			try {
				//@ts-ignore
				const c = await comps[name]["static"]();

				return { name, component: c };
			} catch(e) {
				console.error(`failed to load: ${name}`);
				console.error(e);
				throw e;
			}
		} else {
			// console.error(`failed to load: ${name}`);
			// console.error(e);
			throw e;
		}
	}
}

function isCustomEvent(event) {
	return "detail" in event;
}

function instance($$self, $$props, $$invalidate) {
	let target_map;

	let $loading_status,
		$$unsubscribe_loading_status = noop,
		$$subscribe_loading_status = () => ($$unsubscribe_loading_status(), $$unsubscribe_loading_status = subscribe(loading_status, $$value => $$invalidate(29, $loading_status = $$value)), loading_status);

	let $_;
	validate_store(X, '_');
	component_subscribe($$self, X, $$value => $$invalidate(20, $_ = $$value));
	$$self.$$.on_destroy.push(() => $$unsubscribe_loading_status());
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Blocks', slots, []);
	setupi18n();
	let { root } = $$props;
	let { components } = $$props;
	let { layout } = $$props;
	let { dependencies } = $$props;
	let { title = "Gradio" } = $$props;
	let { analytics_enabled = false } = $$props;
	let { target } = $$props;
	let { autoscroll } = $$props;
	let { show_api = true } = $$props;
	let { show_footer = true } = $$props;
	let { control_page_title = false } = $$props;
	let { app_mode } = $$props;
	let { theme_mode } = $$props;
	let { app } = $$props;
	let { space_id } = $$props;
	let { version } = $$props;
	let loading_status = create_loading_status_store();
	validate_store(loading_status, 'loading_status');
	$$subscribe_loading_status();

	let rootNode = {
		id: layout.id,
		type: "column",
		props: { mode: "static" },
		has_modes: false,
		instance: null,
		component: null
	};

	const AsyncFunction = Object.getPrototypeOf(async function () {
		
	}).constructor;

	dependencies.forEach(d => {
		if (d.js) {
			const wrap = d.backend_fn
			? d.inputs.length === 1
			: d.outputs.length === 1;

			try {
				d.frontend_fn = new AsyncFunction("__fn_args",
				`let result = await (${d.js})(...__fn_args);
					return (${wrap} && !Array.isArray(result)) ? [result] : result;`);
			} catch(e) {
				console.error("Could not parse custom js method.");
				console.error(e);
			}
		}
	});

	let params = new URLSearchParams(window.location.search);
	let api_docs_visible = params.get("view") === "api" && show_api;

	function set_api_docs_visible(visible) {
		$$invalidate(16, api_docs_visible = visible);
		let params = new URLSearchParams(window.location.search);

		if (visible) {
			params.set("view", "api");
		} else {
			params.delete("view");
		}

		history.replaceState(null, "", "?" + params.toString());
	}

	let dynamic_ids = new Set();
	let instance_map;

	async function load_component(name, mode) {
		try {
			//@ts-ignore
			const c = await component_map[name][mode]();

			return { name, component: c };
		} catch(e) {
			if (mode === "example") {
				try {
					return load_custom_component(name, "example");
				} catch(e) {
					return {
						name,
						component: await __vitePreload(() => import('./index-ef058d9e.js'),true?["./index-ef058d9e.js","./index-30423ace.js","./index-7d858894.css","./Button-153ea7e7.js","./Button-d1784ebc.css"]:void 0,import.meta.url)
					};
				}
			}

			if (mode === "interactive") {
				try {
					const c = await component_map[name]["static"]();
					return { name, component: c };
				} catch(e) {
					console.error(`failed to load: ${name}`);
					console.error(e);
					throw e;
				}
			} else {
				console.error(`failed to load: ${name}`);
				console.error(e);
				throw e;
			}
		}
	}

	let component_set = new Set();
	let _component_map = new Map();

	async function walk_layout(node, type_map, instance_map, component_map) {
		$$invalidate(0, ready = false);
		let instance = instance_map[node.id];
		const _component = (await component_map.get(`${instance.type}_${type_map.get(node.id) || "static"}`)).component;
		instance.component = _component.default;

		if (node.children) {
			instance.children = node.children.map(v => instance_map[v.id]);
			await Promise.all(node.children.map(v => walk_layout(v, type_map, instance_map, component_map)));
		}
	}

	let { ready = false } = $$props;
	let { render_complete = false } = $$props;

	function prepare_components() {
		$$subscribe_loading_status($$invalidate(14, loading_status = create_loading_status_store()));

		dependencies.forEach((v, i) => {
			loading_status.register(i, v.inputs, v.outputs);
		});

		const _dynamic_ids = new Set();

		for (const comp of components) {
			const { id, props } = comp;
			const is_input = is_dep(id, "inputs", dependencies);

			if (is_input || !is_dep(id, "outputs", dependencies) && has_no_default_value(props?.value)) {
				_dynamic_ids.add(id);
			}
		}

		$$invalidate(17, dynamic_ids = _dynamic_ids);

		const _rootNode = {
			id: layout.id,
			type: "column",
			props: { mode: "static" },
			has_modes: false,
			instance: null,
			component: null
		};

		components.push(_rootNode);
		const _component_set = new Set();
		const __component_map = new Map();
		const __type_for_id = new Map();

		const _instance_map = components.reduce(
			(acc, next) => {
				acc[next.id] = next;
				return acc;
			},
			{}
		);

		components.forEach(c => {
			if (c.props.interactive === false) {
				c.props.mode = "static";
			} else if (c.props.interactive === true) {
				c.props.mode = "interactive";
			} else if (dynamic_ids.has(c.id)) {
				c.props.mode = "interactive";
			} else {
				c.props.mode = "static";
			}

			__type_for_id.set(c.id, c.props.mode);

			if (c.type === "dataset") {
				const example_component_map = new Map();

				c.props.components.forEach(name => {
					if (example_component_map.has(name)) {
						return;
					}

					let _c;

					//@ts-ignore
					_c = load_component(name, "example");

					example_component_map.set(name, _c);
				});

				c.props.component_map = example_component_map;
			}

			// maybe load custom
			const _c = c.props.custom_component
			? load_custom_component(c.type, c.props.mode)
			: load_component(c.type, c.props.mode);

			_component_set.add(_c);
			__component_map.set(`${c.type}_${c.props.mode}`, _c);
		});

		Promise.all(Array.from(_component_set)).then(() => {
			walk_layout(layout, __type_for_id, _instance_map, __component_map).then(async () => {
				$$invalidate(0, ready = true);
				component_set = _component_set;
				_component_map = __component_map;
				$$invalidate(18, instance_map = _instance_map);
				$$invalidate(15, rootNode = _rootNode);
			}).catch(e => {
				console.error(e);
			});
		});
	}

	async function update_interactive_mode(instance, mode) {
		let new_mode = mode === "dynamic" ? "interactive" : mode;
		if (instance.props.mode === new_mode) return;
		instance.props.mode = new_mode;
		const _c = load_component(instance.type, instance.props.mode);
		component_set.add(_c);
		_component_map.set(`${instance.type}_${instance.props.mode}`, _c);

		_c.then(c => {
			instance.component = c.component.default;
			$$invalidate(15, rootNode);
		});
	}

	function handle_update(data, fn_index) {
		const outputs = dependencies[fn_index].outputs;

		data?.forEach((value, i) => {
			const output = instance_map[outputs[i]];
			output.props.value_is_output = true;

			if (typeof value === "object" && value !== null && value.__type__ === "update") {
				for (const [update_key, update_value] of Object.entries(value)) {
					if (update_key === "__type__") {
						continue;
					} else {
						if (update_key === "mode") {
							update_interactive_mode(output, update_value);
						}

						output.props[update_key] = update_value;
					}
				}
			} else {
				output.props.value = value;
			}
		});

		$$invalidate(15, rootNode);
	}

	let submit_map = new Map();

	function set_prop(obj, prop, val) {
		if (!obj?.props) {
			// @ts-ignore
			obj.props = {};
		}

		obj.props[prop] = val;
		$$invalidate(15, rootNode);
	}

	let handled_dependencies = [];
	let messages = [];

	function new_message(message, fn_index, type) {
		return { message, fn_index, type, id: ++_error_id };
	}

	let _error_id = -1;
	let user_left_page = false;

	document.addEventListener("visibilitychange", function () {
		if (document.visibilityState === "hidden") {
			user_left_page = true;
		}
	});

	const DUPLICATE_MESSAGE = $_("blocks.long_requests_queue");
	const MOBILE_QUEUE_WARNING = $_("blocks.connection_can_break");
	const MOBILE_RECONNECT_MESSAGE = $_("blocks.lost_connection");
	const is_mobile_device = (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i).test(navigator.userAgent);
	let showed_duplicate_message = false;
	let showed_mobile_warning = false;

	async function trigger_api_call(dep_index, event_data = null) {
		let dep = dependencies[dep_index];
		const current_status = loading_status.get_status_for_fn(dep_index);
		$$invalidate(19, messages = messages.filter(({ fn_index }) => fn_index !== dep_index));

		if (dep.cancels) {
			await Promise.all(dep.cancels.map(async fn_index => {
				const submission = submit_map.get(fn_index);
				submission?.cancel();
				return submission;
			}));
		}

		if (current_status === "pending" || current_status === "generating") {
			return;
		}

		let payload = {
			fn_index: dep_index,
			data: dep.inputs.map(id => instance_map[id].props.value),
			event_data: dep.collects_event_data ? event_data : null
		};

		if (dep.frontend_fn) {
			dep.frontend_fn(payload.data.concat(dep.outputs.map(id => instance_map[id].props.value))).then(v => {
				if (dep.backend_fn) {
					payload.data = v;
					make_prediction();
				} else {
					handle_update(v, dep_index);
				}
			});
		} else {
			if (dep.backend_fn) {
				make_prediction();
			}
		}

		function make_prediction() {
			const submission = app.submit(payload.fn_index, payload.data, payload.event_data).on("data", ({ data, fn_index }) => {
				handle_update(data, fn_index);
			}).on("status", ({ fn_index, ...status }) => {
				//@ts-ignore
				loading_status.update({
					...status,
					status: status.stage,
					progress: status.progress_data,
					fn_index
				});

				if (!showed_duplicate_message && space_id !== null && status.position !== undefined && status.position >= 2 && status.eta !== undefined && status.eta > SHOW_DUPLICATE_MESSAGE_ON_ETA) {
					showed_duplicate_message = true;
					$$invalidate(19, messages = [new_message(DUPLICATE_MESSAGE, fn_index, "warning"), ...messages]);
				}

				if (!showed_mobile_warning && is_mobile_device && status.eta !== undefined && status.eta > SHOW_MOBILE_QUEUE_WARNING_ON_ETA) {
					showed_mobile_warning = true;
					$$invalidate(19, messages = [new_message(MOBILE_QUEUE_WARNING, fn_index, "warning"), ...messages]);
				}

				if (status.stage === "complete") {
					dependencies.map(async (dep, i) => {
						if (dep.trigger_after === fn_index) {
							trigger_api_call(i);
						}
					});

					submission.destroy();
				}

				if (status.broken && is_mobile_device && user_left_page) {
					window.setTimeout(
						() => {
							$$invalidate(19, messages = [
								new_message(MOBILE_RECONNECT_MESSAGE, fn_index, "error"),
								...messages
							]);
						},
						0
					);

					trigger_api_call(dep_index, event_data);
					user_left_page = false;
				} else if (status.stage === "error") {
					if (status.message) {
						const _message = status.message.replace(MESSAGE_QUOTE_RE, (_, b) => b);
						$$invalidate(19, messages = [new_message(_message, fn_index, "error"), ...messages]);
					}

					dependencies.map(async (dep, i) => {
						if (dep.trigger_after === fn_index && !dep.trigger_only_on_success) {
							trigger_api_call(i);
						}
					});

					submission.destroy();
				}
			}).on("log", ({ log, fn_index, level }) => {
				$$invalidate(19, messages = [new_message(log, fn_index, level), ...messages]);
			});

			submit_map.set(dep_index, submission);
		}
	}

	function trigger_share(title, description) {
		if (space_id === null) {
			return;
		}

		const discussion_url = new URL(`https://huggingface.co/spaces/${space_id}/discussions/new`);

		if (title !== undefined && title.length > 0) {
			discussion_url.searchParams.set("title", title);
		}

		discussion_url.searchParams.set("description", description);
		window.open(discussion_url.toString(), "_blank");
	}

	function handle_error_close(e) {
		const _id = e.detail;
		$$invalidate(19, messages = messages.filter(m => m.id !== _id));
	}

	const is_external_url = link => !!(link && new URL(link, location.href).origin !== location.origin);

	async function handle_mount() {
		await tick();
		var a = target.getElementsByTagName("a");

		for (var i = 0; i < a.length; i++) {
			const _target = a[i].getAttribute("target");
			const _link = a[i].getAttribute("href");

			// only target anchor tags with external links
			if (is_external_url(_link) && _target !== "_blank") a[i].setAttribute("target", "_blank");
		}

		// handle load triggers
		dependencies.forEach((dep, i) => {
			if (dep.targets.length === 0 && dep.trigger === "load") {
				trigger_api_call(i);
			}
		});

		target.addEventListener("gradio", e => {
			if (!isCustomEvent(e)) throw new Error("not a custom event");
			const { id, event, data } = e.detail;

			if (event === "share") {
				const { title, description } = data;
				trigger_share(title, description);
			} else if (event === "error") {
				$$invalidate(19, messages = [new_message(data, -1, "error"), ...messages]);
			} else {
				const deps = target_map[id]?.[event];

				deps?.forEach(dep_id => {
					trigger_api_call(dep_id, data);
				});
			}
		});

		$$invalidate(25, render_complete = true);
	}

	function handle_destroy(id) {
		handled_dependencies = handled_dependencies.map(dep => {
			return dep.filter(_id => _id !== id);
		});
	}

	function set_status(statuses) {
		for (const id in statuses) {
			let loading_status = statuses[id];
			let dependency = dependencies[loading_status.fn_index];
			loading_status.scroll_to_output = dependency.scroll_to_output;
			loading_status.show_progress = dependency.show_progress;
			set_prop(instance_map[id], "loading_status", loading_status);
		}

		const inputs_to_update = loading_status.get_inputs_to_update();

		for (const [id, pending_status] of inputs_to_update) {
			set_prop(instance_map[id], "pending", pending_status === "pending");
		}
	}

	$$self.$$.on_mount.push(function () {
		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console_1.warn("<Blocks> was created without expected prop 'root'");
		}

		if (components === undefined && !('components' in $$props || $$self.$$.bound[$$self.$$.props['components']])) {
			console_1.warn("<Blocks> was created without expected prop 'components'");
		}

		if (layout === undefined && !('layout' in $$props || $$self.$$.bound[$$self.$$.props['layout']])) {
			console_1.warn("<Blocks> was created without expected prop 'layout'");
		}

		if (dependencies === undefined && !('dependencies' in $$props || $$self.$$.bound[$$self.$$.props['dependencies']])) {
			console_1.warn("<Blocks> was created without expected prop 'dependencies'");
		}

		if (target === undefined && !('target' in $$props || $$self.$$.bound[$$self.$$.props['target']])) {
			console_1.warn("<Blocks> was created without expected prop 'target'");
		}

		if (autoscroll === undefined && !('autoscroll' in $$props || $$self.$$.bound[$$self.$$.props['autoscroll']])) {
			console_1.warn("<Blocks> was created without expected prop 'autoscroll'");
		}

		if (app_mode === undefined && !('app_mode' in $$props || $$self.$$.bound[$$self.$$.props['app_mode']])) {
			console_1.warn("<Blocks> was created without expected prop 'app_mode'");
		}

		if (theme_mode === undefined && !('theme_mode' in $$props || $$self.$$.bound[$$self.$$.props['theme_mode']])) {
			console_1.warn("<Blocks> was created without expected prop 'theme_mode'");
		}

		if (app === undefined && !('app' in $$props || $$self.$$.bound[$$self.$$.props['app']])) {
			console_1.warn("<Blocks> was created without expected prop 'app'");
		}

		if (space_id === undefined && !('space_id' in $$props || $$self.$$.bound[$$self.$$.props['space_id']])) {
			console_1.warn("<Blocks> was created without expected prop 'space_id'");
		}

		if (version === undefined && !('version' in $$props || $$self.$$.bound[$$self.$$.props['version']])) {
			console_1.warn("<Blocks> was created without expected prop 'version'");
		}
	});

	const writable_props = [
		'root',
		'components',
		'layout',
		'dependencies',
		'title',
		'analytics_enabled',
		'target',
		'autoscroll',
		'show_api',
		'show_footer',
		'control_page_title',
		'app_mode',
		'theme_mode',
		'app',
		'space_id',
		'version',
		'ready',
		'render_complete'
	];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Blocks> was created with unknown prop '${key}'`);
	});

	const destroy_handler = ({ detail }) => handle_destroy(detail);

	const click_handler = () => {
		set_api_docs_visible(!api_docs_visible);
	};

	const click_handler_1 = () => {
		set_api_docs_visible(false);
	};

	const close_handler = () => {
		set_api_docs_visible(false);
	};

	$$self.$$set = $$props => {
		if ('root' in $$props) $$invalidate(1, root = $$props.root);
		if ('components' in $$props) $$invalidate(26, components = $$props.components);
		if ('layout' in $$props) $$invalidate(27, layout = $$props.layout);
		if ('dependencies' in $$props) $$invalidate(2, dependencies = $$props.dependencies);
		if ('title' in $$props) $$invalidate(3, title = $$props.title);
		if ('analytics_enabled' in $$props) $$invalidate(4, analytics_enabled = $$props.analytics_enabled);
		if ('target' in $$props) $$invalidate(5, target = $$props.target);
		if ('autoscroll' in $$props) $$invalidate(6, autoscroll = $$props.autoscroll);
		if ('show_api' in $$props) $$invalidate(7, show_api = $$props.show_api);
		if ('show_footer' in $$props) $$invalidate(8, show_footer = $$props.show_footer);
		if ('control_page_title' in $$props) $$invalidate(9, control_page_title = $$props.control_page_title);
		if ('app_mode' in $$props) $$invalidate(10, app_mode = $$props.app_mode);
		if ('theme_mode' in $$props) $$invalidate(11, theme_mode = $$props.theme_mode);
		if ('app' in $$props) $$invalidate(12, app = $$props.app);
		if ('space_id' in $$props) $$invalidate(28, space_id = $$props.space_id);
		if ('version' in $$props) $$invalidate(13, version = $$props.version);
		if ('ready' in $$props) $$invalidate(0, ready = $$props.ready);
		if ('render_complete' in $$props) $$invalidate(25, render_complete = $$props.render_complete);
	};

	$$self.$capture_state = () => ({
		onMount,
		tick,
		_: X,
		component_map,
		fallback_component_map,
		create_loading_status_store,
		setupi18n,
		ApiDocs,
		Toast,
		MountComponents,
		logo,
		api_logo,
		root,
		components,
		layout,
		dependencies,
		title,
		analytics_enabled,
		target,
		autoscroll,
		show_api,
		show_footer,
		control_page_title,
		app_mode,
		theme_mode,
		app,
		space_id,
		version,
		loading_status,
		rootNode,
		AsyncFunction,
		params,
		api_docs_visible,
		set_api_docs_visible,
		is_dep,
		dynamic_ids,
		has_no_default_value,
		instance_map,
		load_component,
		component_set,
		_component_map,
		walk_layout,
		ready,
		render_complete,
		load_custom_component,
		prepare_components,
		update_interactive_mode,
		handle_update,
		submit_map,
		set_prop,
		handled_dependencies,
		messages,
		new_message,
		_error_id,
		user_left_page,
		MESSAGE_QUOTE_RE,
		DUPLICATE_MESSAGE,
		MOBILE_QUEUE_WARNING,
		MOBILE_RECONNECT_MESSAGE,
		SHOW_DUPLICATE_MESSAGE_ON_ETA,
		SHOW_MOBILE_QUEUE_WARNING_ON_ETA,
		is_mobile_device,
		showed_duplicate_message,
		showed_mobile_warning,
		trigger_api_call,
		trigger_share,
		handle_error_close,
		is_external_url,
		handle_mount,
		handle_destroy,
		set_status,
		isCustomEvent,
		target_map,
		$loading_status,
		$_
	});

	$$self.$inject_state = $$props => {
		if ('root' in $$props) $$invalidate(1, root = $$props.root);
		if ('components' in $$props) $$invalidate(26, components = $$props.components);
		if ('layout' in $$props) $$invalidate(27, layout = $$props.layout);
		if ('dependencies' in $$props) $$invalidate(2, dependencies = $$props.dependencies);
		if ('title' in $$props) $$invalidate(3, title = $$props.title);
		if ('analytics_enabled' in $$props) $$invalidate(4, analytics_enabled = $$props.analytics_enabled);
		if ('target' in $$props) $$invalidate(5, target = $$props.target);
		if ('autoscroll' in $$props) $$invalidate(6, autoscroll = $$props.autoscroll);
		if ('show_api' in $$props) $$invalidate(7, show_api = $$props.show_api);
		if ('show_footer' in $$props) $$invalidate(8, show_footer = $$props.show_footer);
		if ('control_page_title' in $$props) $$invalidate(9, control_page_title = $$props.control_page_title);
		if ('app_mode' in $$props) $$invalidate(10, app_mode = $$props.app_mode);
		if ('theme_mode' in $$props) $$invalidate(11, theme_mode = $$props.theme_mode);
		if ('app' in $$props) $$invalidate(12, app = $$props.app);
		if ('space_id' in $$props) $$invalidate(28, space_id = $$props.space_id);
		if ('version' in $$props) $$invalidate(13, version = $$props.version);
		if ('loading_status' in $$props) $$subscribe_loading_status($$invalidate(14, loading_status = $$props.loading_status));
		if ('rootNode' in $$props) $$invalidate(15, rootNode = $$props.rootNode);
		if ('params' in $$props) params = $$props.params;
		if ('api_docs_visible' in $$props) $$invalidate(16, api_docs_visible = $$props.api_docs_visible);
		if ('dynamic_ids' in $$props) $$invalidate(17, dynamic_ids = $$props.dynamic_ids);
		if ('instance_map' in $$props) $$invalidate(18, instance_map = $$props.instance_map);
		if ('component_set' in $$props) component_set = $$props.component_set;
		if ('_component_map' in $$props) _component_map = $$props._component_map;
		if ('ready' in $$props) $$invalidate(0, ready = $$props.ready);
		if ('render_complete' in $$props) $$invalidate(25, render_complete = $$props.render_complete);
		if ('submit_map' in $$props) submit_map = $$props.submit_map;
		if ('handled_dependencies' in $$props) handled_dependencies = $$props.handled_dependencies;
		if ('messages' in $$props) $$invalidate(19, messages = $$props.messages);
		if ('_error_id' in $$props) _error_id = $$props._error_id;
		if ('user_left_page' in $$props) user_left_page = $$props.user_left_page;
		if ('showed_duplicate_message' in $$props) showed_duplicate_message = $$props.showed_duplicate_message;
		if ('showed_mobile_warning' in $$props) showed_mobile_warning = $$props.showed_mobile_warning;
		if ('target_map' in $$props) target_map = $$props.target_map;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*components, layout*/ 201326592) {
			(prepare_components());
		}

		if ($$self.$$.dirty[0] & /*dependencies*/ 4) {
			target_map = dependencies.reduce(
				(acc, dep, i) => {
					let { targets, trigger } = dep;

					targets.forEach(id => {
						if (!acc[id]) {
							acc[id] = {};
						}

						if (acc[id]?.[trigger]) {
							acc[id][trigger].push(i);
						} else {
							acc[id][trigger] = [i];
						}
					});

					return acc;
				},
				{}
			);
		}

		if ($$self.$$.dirty[0] & /*$loading_status*/ 536870912) {
			set_status($loading_status);
		}
	};

	return [
		ready,
		root,
		dependencies,
		title,
		analytics_enabled,
		target,
		autoscroll,
		show_api,
		show_footer,
		control_page_title,
		app_mode,
		theme_mode,
		app,
		version,
		loading_status,
		rootNode,
		api_docs_visible,
		dynamic_ids,
		instance_map,
		messages,
		$_,
		set_api_docs_visible,
		handle_error_close,
		handle_mount,
		handle_destroy,
		render_complete,
		components,
		layout,
		space_id,
		$loading_status,
		destroy_handler,
		click_handler,
		click_handler_1,
		close_handler
	];
}

class Blocks extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				root: 1,
				components: 26,
				layout: 27,
				dependencies: 2,
				title: 3,
				analytics_enabled: 4,
				target: 5,
				autoscroll: 6,
				show_api: 7,
				show_footer: 8,
				control_page_title: 9,
				app_mode: 10,
				theme_mode: 11,
				app: 12,
				space_id: 28,
				version: 13,
				ready: 0,
				render_complete: 25
			},
			null,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Blocks",
			options,
			id: create_fragment.name
		});
	}

	get root() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get components() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set components(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get layout() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set layout(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dependencies() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dependencies(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get analytics_enabled() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set analytics_enabled(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get target() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set target(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autoscroll() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autoscroll(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_api() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_api(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_footer() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_footer(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get control_page_title() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set control_page_title(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get app_mode() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app_mode(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get theme_mode() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set theme_mode(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get app() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get space_id() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set space_id(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get version() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set version(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ready() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ready(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get render_complete() {
		throw new Error_1("<Blocks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set render_complete(value) {
		throw new Error_1("<Blocks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Blocks$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	default: Blocks
}, Symbol.toStringTag, { value: 'Module' }));

export { Blocks$1 as B, Fallback as F, Toast as T };
//# sourceMappingURL=Blocks-eb3f181b.js.map
